ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"hk32f0xx_rcc.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.RCC_DeInit,"ax",%progbits
  16              		.align	1
  17              		.global	RCC_DeInit
  18              		.arch armv6s-m
  19              		.syntax unified
  20              		.code	16
  21              		.thumb_func
  22              		.fpu softvfp
  24              	RCC_DeInit:
  25              	.LFB33:
  26              		.file 1 "hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c"
   1:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
   2:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   ******************************************************************************
   3:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @file    hk32f0xx_rcc.c 
   4:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****  ===============================================================================
   5:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****                         ##### RCC specific features #####
   6:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****  ===============================================================================
   7:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     [..] After reset the device is running from HSI (8 MHz) with Flash 0 WS, 
   8:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****          all peripherals are off except internal SRAM, Flash and SWD.
   9:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****          (#) There is no prescaler on High speed (AHB) and Low speed (APB) busses;
  10:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****              all peripherals mapped on these busses are running at HSI speed.
  11:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****          (#) The clock for all peripherals is switched off, except the SRAM and FLASH.
  12:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****          (#) All GPIOs are in input floating state, except the SWD pins which
  13:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****              are assigned to be used for debug purpose.
  14:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     [..] Once the device started from reset, the user application has to:
  15:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****          (#) Configure the clock source to be used to drive the System clock
  16:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****              (if the application needs higher frequency/performance)
  17:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****          (#) Configure the System clock frequency and Flash settings
  18:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****          (#) Configure the AHB and APB busses prescalers
  19:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****          (#) Enable the clock for the peripheral(s) to be used
  20:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****          (#) Configure the clock source(s) for peripherals which clocks are not
  21:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****              derived from the System clock (ADC, CEC, I2C, USART, RTC and IWDG)
  22:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
  23:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****  @endverbatim
  24:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
  25:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   ****************************************************************************** 
  26:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
  27:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
  28:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /* Includes ------------------------------------------------------------------*/
  29:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** #include "hk32f0xx_rcc.h"
  30:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
  31:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /** @addtogroup HK32F0xx_StdPeriph_Driver
  32:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @{
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 2


  33:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
  34:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
  35:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /** @defgroup RCC 
  36:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @brief RCC driver modules
  37:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @{
  38:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */ 
  39:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
  40:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /* Private typedef -----------------------------------------------------------*/
  41:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /* Private define ------------------------------------------------------------*/
  42:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
  43:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /* ---------------------- RCC registers mask -------------------------------- */
  44:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /* RCC Flag Mask */
  45:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** #define FLAG_MASK                 ((uint8_t)0x1F)
  46:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
  47:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /* CR register byte 2 (Bits[23:16]) base address */
  48:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** #define CR_BYTE2_ADDRESS          ((uint32_t)0x40021002)
  49:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
  50:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /* CFGR register byte 3 (Bits[31:23]) base address */
  51:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** #define CFGR_BYTE3_ADDRESS        ((uint32_t)0x40021007)
  52:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
  53:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /* CIR register byte 1 (Bits[15:8]) base address */
  54:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** #define CIR_BYTE1_ADDRESS         ((uint32_t)0x40021009)
  55:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
  56:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /* CIR register byte 2 (Bits[23:16]) base address */
  57:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** #define CIR_BYTE2_ADDRESS         ((uint32_t)0x4002100A)
  58:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
  59:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /* Private macro -------------------------------------------------------------*/
  60:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /* Private variables ---------------------------------------------------------*/
  61:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** static __I uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
  62:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
  63:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /* Private function prototypes -----------------------------------------------*/
  64:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /* Private functions ---------------------------------------------------------*/
  65:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
  66:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /** @defgroup RCC_Private_Functions
  67:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @{
  68:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
  69:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
  70:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /** @defgroup RCC_Group1 Internal and external clocks, PLL, CSS and MCO configuration functions
  71:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****  *  @brief   Internal and external clocks, PLL, CSS and MCO configuration functions 
  72:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****  *
  73:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** @verbatim
  74:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****  ===============================================================================
  75:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****  ##### Internal-external clocks, PLL, CSS and MCO configuration functions #####
  76:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****  ===============================================================================
  77:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     [..] This section provides functions allowing to configure the internal/external clocks,
  78:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****          PLL, CSS and MCO.
  79:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****          (#) HSI (high-speed internal), 8 MHz factory-trimmed RC used directly 
  80:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****              or through the PLL as System clock source.
  81:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****              The HSI clock can be used also to clock the USART, I2C and CEC peripherals.
  82:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****          (#) HSI14 (high-speed internal for ADC), 14 MHz factory-trimmed RC used to clock
  83:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****              the ADC peripheral.
  84:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****          (#) LSI (low-speed internal), 40 KHz low consumption RC used as IWDG and/or RTC
  85:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****              clock source.
  86:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****          (#) HSE (high-speed external), 4 to 32 MHz crystal oscillator used directly or
  87:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****              through the PLL as System clock source. Can be used also as RTC clock source.
  88:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****          (#) LSE (low-speed external), 32 KHz oscillator used as RTC clock source. 
  89:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****              LSE can be used also to clock the USART and CEC peripherals.   
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 3


  90:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****          (#) PLL (clocked by HSI or HSE), for System clock.
  91:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****          (#) CSS (Clock security system), once enabled and if a HSE clock failure occurs 
  92:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****              (HSE used directly or through PLL as System clock source), the System clock
  93:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****              is automatically switched to HSI and an interrupt is generated if enabled. 
  94:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****              The interrupt is linked to the Cortex-M0 NMI (Non-Maskable Interrupt) 
  95:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****              exception vector.   
  96:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****          (#) MCO (microcontroller clock output), used to output SYSCLK, HSI, HSI14, LSI,
  97:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****              HSE, LSE or PLL (divided by 2) clock on PA8 pin.
  98:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
  99:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** @endverbatim
 100:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @{
 101:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
 102:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 103:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
 104:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 105:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 106:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note      HSI ON and used as system clock source 
 107:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note      HSI14, HSE and PLL OFF
 108:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note      AHB, APB prescaler set to 1.
 109:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note      CSS and MCO OFF
 110:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note      All interrupts disabled
 111:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   However, this function doesn't modify the configuration of the
 112:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note      Peripheral clocks
 113:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note      LSI, LSE and RTC clocks
 114:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  None
 115:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @retval None
 116:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
 117:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** void RCC_DeInit(void)
 118:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** {
  27              		.loc 1 118 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 119:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Set HSION bit */
 120:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   RCC->CR |= (uint32_t)0x00000001;
  32              		.loc 1 120 3 view .LVU1
  33              		.loc 1 120 11 is_stmt 0 view .LVU2
  34 0000 114B     		ldr	r3, .L2
  35 0002 1A68     		ldr	r2, [r3]
  36 0004 0121     		movs	r1, #1
  37 0006 0A43     		orrs	r2, r1
  38 0008 1A60     		str	r2, [r3]
 121:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 122:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** #if defined (HK32F051)
 123:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Reset SW[1:0], HPRE[3:0], PPRE[2:0] and MCOSEL[2:0] bits */
 124:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   RCC->CFGR &= (uint32_t)0xF8FFB80C;
 125:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** #else
 126:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
 127:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   RCC->CFGR &= (uint32_t)0x08FFB80C;
  39              		.loc 1 127 3 is_stmt 1 view .LVU3
  40              		.loc 1 127 13 is_stmt 0 view .LVU4
  41 000a 5A68     		ldr	r2, [r3, #4]
  42 000c 0F48     		ldr	r0, .L2+4
  43 000e 0240     		ands	r2, r0
  44 0010 5A60     		str	r2, [r3, #4]
 128:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** #endif /* HK32F051 */
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 4


 129:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
 130:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Reset HSEON, CSSON and PLLON bits */
 131:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
  45              		.loc 1 131 3 is_stmt 1 view .LVU5
  46              		.loc 1 131 11 is_stmt 0 view .LVU6
  47 0012 1A68     		ldr	r2, [r3]
  48 0014 0E48     		ldr	r0, .L2+8
  49 0016 0240     		ands	r2, r0
  50 0018 1A60     		str	r2, [r3]
 132:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 133:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Reset HSEBYP bit */
 134:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  51              		.loc 1 134 3 is_stmt 1 view .LVU7
  52              		.loc 1 134 11 is_stmt 0 view .LVU8
  53 001a 1A68     		ldr	r2, [r3]
  54 001c 0D48     		ldr	r0, .L2+12
  55 001e 0240     		ands	r2, r0
  56 0020 1A60     		str	r2, [r3]
 135:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 136:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
 137:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   RCC->CFGR &= (uint32_t)0xFFC0FFFF;
  57              		.loc 1 137 3 is_stmt 1 view .LVU9
  58              		.loc 1 137 13 is_stmt 0 view .LVU10
  59 0022 5A68     		ldr	r2, [r3, #4]
  60 0024 0C48     		ldr	r0, .L2+16
  61 0026 0240     		ands	r2, r0
  62 0028 5A60     		str	r2, [r3, #4]
 138:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 139:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Reset PREDIV1[3:0] bits */
 140:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
  63              		.loc 1 140 3 is_stmt 1 view .LVU11
  64              		.loc 1 140 14 is_stmt 0 view .LVU12
  65 002a DA6A     		ldr	r2, [r3, #44]
  66 002c 0F20     		movs	r0, #15
  67 002e 8243     		bics	r2, r0
  68 0030 DA62     		str	r2, [r3, #44]
 141:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 142:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
 143:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
  69              		.loc 1 143 3 is_stmt 1 view .LVU13
  70              		.loc 1 143 14 is_stmt 0 view .LVU14
  71 0032 1A6B     		ldr	r2, [r3, #48]
  72 0034 0948     		ldr	r0, .L2+20
  73 0036 0240     		ands	r2, r0
  74 0038 1A63     		str	r2, [r3, #48]
 144:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
 145:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Reset HSI14 bit */
 146:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   RCC->CR2 &= (uint32_t)0xFFFFFFFE;
  75              		.loc 1 146 3 is_stmt 1 view .LVU15
  76              		.loc 1 146 12 is_stmt 0 view .LVU16
  77 003a 5A6B     		ldr	r2, [r3, #52]
  78 003c 8A43     		bics	r2, r1
  79 003e 5A63     		str	r2, [r3, #52]
 147:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 148:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Disable all interrupts */
 149:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   RCC->CIR = 0x00000000;
  80              		.loc 1 149 3 is_stmt 1 view .LVU17
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 5


  81              		.loc 1 149 12 is_stmt 0 view .LVU18
  82 0040 0022     		movs	r2, #0
  83 0042 9A60     		str	r2, [r3, #8]
 150:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** }
  84              		.loc 1 150 1 view .LVU19
  85              		@ sp needed
  86 0044 7047     		bx	lr
  87              	.L3:
  88 0046 C046     		.align	2
  89              	.L2:
  90 0048 00100240 		.word	1073876992
  91 004c 0CB8FF08 		.word	150976524
  92 0050 FFFFF6FE 		.word	-17367041
  93 0054 FFFFFBFF 		.word	-262145
  94 0058 FFFFC0FF 		.word	-4128769
  95 005c ACFEF0FF 		.word	-983380
  96              		.cfi_endproc
  97              	.LFE33:
  99              		.section	.text.RCC_HSEConfig,"ax",%progbits
 100              		.align	1
 101              		.global	RCC_HSEConfig
 102              		.syntax unified
 103              		.code	16
 104              		.thumb_func
 105              		.fpu softvfp
 107              	RCC_HSEConfig:
 108              	.LVL0:
 109              	.LFB34:
 151:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 152:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
 153:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @brief  Configures the External High Speed oscillator (HSE).
 154:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   After enabling the HSE (RCC_HSE_ON or RCC_HSE_Bypass), the application
 155:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         software should wait on HSERDY flag to be set indicating that HSE clock
 156:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         is stable and can be used to clock the PLL and/or system clock.
 157:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   HSE state can not be changed if it is used directly or through the
 158:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         PLL as system clock. In this case, you have to select another source
 159:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         of the system clock then change the HSE state (ex. disable it).
 160:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   The HSE is stopped by hardware when entering STOP and STANDBY modes.
 161:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   This function resets the CSSON bit, so if the Clock security system(CSS)
 162:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         was previously enabled you have to enable it again after calling this
 163:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         function.
 164:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  RCC_HSE: specifies the new state of the HSE.
 165:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 166:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_HSE_OFF: turn OFF the HSE oscillator, HSERDY flag goes low after
 167:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *                              6 HSE oscillator clock cycles.
 168:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_HSE_ON: turn ON the HSE oscillator
 169:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
 170:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @retval None
 171:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
 172:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** void RCC_HSEConfig(uint8_t RCC_HSE)
 173:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** {
 110              		.loc 1 173 1 is_stmt 1 view -0
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 0
 113              		@ frame_needed = 0, uses_anonymous_args = 0
 114              		@ link register save eliminated.
 174:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Check the parameters */
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 6


 175:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_RCC_HSE(RCC_HSE));
 115              		.loc 1 175 3 view .LVU21
 176:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 177:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
 178:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE_OFF;
 116              		.loc 1 178 3 view .LVU22
 117              		.loc 1 178 38 is_stmt 0 view .LVU23
 118 0000 024B     		ldr	r3, .L5
 119 0002 0022     		movs	r2, #0
 120 0004 1A70     		strb	r2, [r3]
 179:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 180:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Set the new HSE configuration -------------------------------------------*/
 181:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE;
 121              		.loc 1 181 3 is_stmt 1 view .LVU24
 122              		.loc 1 181 38 is_stmt 0 view .LVU25
 123 0006 1870     		strb	r0, [r3]
 182:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 183:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** }
 124              		.loc 1 183 1 view .LVU26
 125              		@ sp needed
 126 0008 7047     		bx	lr
 127              	.L6:
 128 000a C046     		.align	2
 129              	.L5:
 130 000c 02100240 		.word	1073876994
 131              		.cfi_endproc
 132              	.LFE34:
 134              		.section	.text.RCC_AdjustHSICalibrationValue,"ax",%progbits
 135              		.align	1
 136              		.global	RCC_AdjustHSICalibrationValue
 137              		.syntax unified
 138              		.code	16
 139              		.thumb_func
 140              		.fpu softvfp
 142              	RCC_AdjustHSICalibrationValue:
 143              	.LVL1:
 144              	.LFB36:
 184:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 185:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
 186:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @brief  Waits for HSE start-up.
 187:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   This function waits on HSERDY flag to be set and return SUCCESS if 
 188:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         this flag is set, otherwise returns ERROR if the timeout is reached 
 189:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         and this flag is not set. The timeout value is defined by the constant
 190:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         HSE_STARTUP_TIMEOUT in hk32f0xx.h file. You can tailor it depending
 191:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         on the HSE crystal used in your application.
 192:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   The HSE is stopped by hardware when entering STOP and STANDBY modes.
 193:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  None
 194:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @retval An ErrorStatus enumeration value:
 195:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          - SUCCESS: HSE oscillator is stable and ready to use
 196:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          - ERROR: HSE oscillator not yet ready
 197:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
 198:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** ErrorStatus RCC_WaitForHSEStartUp(void)
 199:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** {
 200:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   __IO uint32_t StartUpCounter = 0;
 201:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   ErrorStatus status = ERROR;
 202:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   FlagStatus HSEStatus = RESET;
 203:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 7


 204:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Wait till HSE is ready and if timeout is reached exit */
 205:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   do
 206:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 207:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 208:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     StartUpCounter++;  
 209:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 210:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
 211:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 212:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 213:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     status = SUCCESS;
 214:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 215:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   else
 216:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 217:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     status = ERROR;
 218:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }  
 219:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   return (status);
 220:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** }
 221:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 222:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
 223:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator (HSI) calibration value.
 224:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   The calibration is used to compensate for the variations in voltage
 225:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         and temperature that influence the frequency of the internal HSI RC.
 226:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         Refer to the Application Note AN4067 for more details on how to  
 227:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         calibrate the HSI.
 228:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  HSICalibrationValue: specifies the HSI calibration trimming value.
 229:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter must be a number between 0 and 0x1F.
 230:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @retval None
 231:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
 232:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
 233:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** {
 145              		.loc 1 233 1 is_stmt 1 view -0
 146              		.cfi_startproc
 147              		@ args = 0, pretend = 0, frame = 0
 148              		@ frame_needed = 0, uses_anonymous_args = 0
 149              		@ link register save eliminated.
 234:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   uint32_t tmpreg = 0;
 150              		.loc 1 234 3 view .LVU28
 235:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
 236:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Check the parameters */
 237:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_RCC_HSI_CALIBRATION_VALUE(HSICalibrationValue));
 151              		.loc 1 237 3 view .LVU29
 238:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
 239:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   tmpreg = RCC->CR;
 152              		.loc 1 239 3 view .LVU30
 153              		.loc 1 239 10 is_stmt 0 view .LVU31
 154 0000 034A     		ldr	r2, .L8
 155 0002 1368     		ldr	r3, [r2]
 156              	.LVL2:
 240:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
 241:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Clear HSITRIM[4:0] bits */
 242:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   tmpreg &= ~RCC_CR_HSITRIM;
 157              		.loc 1 242 3 is_stmt 1 view .LVU32
 158              		.loc 1 242 10 is_stmt 0 view .LVU33
 159 0004 F821     		movs	r1, #248
 160 0006 8B43     		bics	r3, r1
 161              	.LVL3:
 243:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 8


 244:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
 245:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   tmpreg |= (uint32_t)HSICalibrationValue << 3;
 162              		.loc 1 245 3 is_stmt 1 view .LVU34
 163              		.loc 1 245 43 is_stmt 0 view .LVU35
 164 0008 C000     		lsls	r0, r0, #3
 165              	.LVL4:
 166              		.loc 1 245 10 view .LVU36
 167 000a 1843     		orrs	r0, r3
 168              	.LVL5:
 246:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 247:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Store the new value */
 248:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   RCC->CR = tmpreg;
 169              		.loc 1 248 3 is_stmt 1 view .LVU37
 170              		.loc 1 248 11 is_stmt 0 view .LVU38
 171 000c 1060     		str	r0, [r2]
 249:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** }
 172              		.loc 1 249 1 view .LVU39
 173              		@ sp needed
 174 000e 7047     		bx	lr
 175              	.L9:
 176              		.align	2
 177              	.L8:
 178 0010 00100240 		.word	1073876992
 179              		.cfi_endproc
 180              	.LFE36:
 182              		.section	.text.RCC_HSICmd,"ax",%progbits
 183              		.align	1
 184              		.global	RCC_HSICmd
 185              		.syntax unified
 186              		.code	16
 187              		.thumb_func
 188              		.fpu softvfp
 190              	RCC_HSICmd:
 191              	.LVL6:
 192              	.LFB37:
 250:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 251:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
 252:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator (HSI).
 253:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   After enabling the HSI, the application software should wait on 
 254:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         HSIRDY flag to be set indicating that HSI clock is stable and can
 255:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         be used to clock the PLL and/or system clock.
 256:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   HSI can not be stopped if it is used directly or through the PLL
 257:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         as system clock. In this case, you have to select another source 
 258:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         of the system clock then stop the HSI.
 259:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   The HSI is stopped by hardware when entering STOP and STANDBY modes.
 260:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  NewState: new state of the HSI.
 261:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 262:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
 263:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         clock cycles.
 264:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @retval None
 265:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
 266:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** void RCC_HSICmd(FunctionalState NewState)
 267:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** {
 193              		.loc 1 267 1 is_stmt 1 view -0
 194              		.cfi_startproc
 195              		@ args = 0, pretend = 0, frame = 0
 196              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 9


 197              		@ link register save eliminated.
 268:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Check the parameters */
 269:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 198              		.loc 1 269 3 view .LVU41
 270:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
 271:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   if (NewState != DISABLE)
 199              		.loc 1 271 3 view .LVU42
 200              		.loc 1 271 6 is_stmt 0 view .LVU43
 201 0000 0028     		cmp	r0, #0
 202 0002 05D0     		beq	.L11
 272:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 273:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC->CR |= RCC_CR_HSION;
 203              		.loc 1 273 5 is_stmt 1 view .LVU44
 204              		.loc 1 273 13 is_stmt 0 view .LVU45
 205 0004 054A     		ldr	r2, .L13
 206 0006 1368     		ldr	r3, [r2]
 207 0008 0121     		movs	r1, #1
 208 000a 0B43     		orrs	r3, r1
 209 000c 1360     		str	r3, [r2]
 210              	.L10:
 274:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 275:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   else
 276:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 277:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC->CR &= ~RCC_CR_HSION;
 278:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 279:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** }
 211              		.loc 1 279 1 view .LVU46
 212              		@ sp needed
 213 000e 7047     		bx	lr
 214              	.L11:
 277:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 215              		.loc 1 277 5 is_stmt 1 view .LVU47
 277:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 216              		.loc 1 277 13 is_stmt 0 view .LVU48
 217 0010 024A     		ldr	r2, .L13
 218 0012 1368     		ldr	r3, [r2]
 219 0014 0121     		movs	r1, #1
 220 0016 8B43     		bics	r3, r1
 221 0018 1360     		str	r3, [r2]
 222              		.loc 1 279 1 view .LVU49
 223 001a F8E7     		b	.L10
 224              	.L14:
 225              		.align	2
 226              	.L13:
 227 001c 00100240 		.word	1073876992
 228              		.cfi_endproc
 229              	.LFE37:
 231              		.section	.text.RCC_AdjustHSI14CalibrationValue,"ax",%progbits
 232              		.align	1
 233              		.global	RCC_AdjustHSI14CalibrationValue
 234              		.syntax unified
 235              		.code	16
 236              		.thumb_func
 237              		.fpu softvfp
 239              	RCC_AdjustHSI14CalibrationValue:
 240              	.LVL7:
 241              	.LFB38:
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 10


 280:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 281:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
 282:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator for ADC (HSI14) 
 283:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         calibration value.
 284:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   The calibration is used to compensate for the variations in voltage
 285:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         and temperature that influence the frequency of the internal HSI RC.
 286:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         Refer to the Application Note AN4067  for more details on how to  
 287:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         calibrate the HSI14.
 288:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  HSI14CalibrationValue: specifies the HSI14 calibration trimming value.
 289:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter must be a number between 0 and 0x1F.
 290:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @retval None
 291:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
 292:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** void RCC_AdjustHSI14CalibrationValue(uint8_t HSI14CalibrationValue)
 293:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** {
 242              		.loc 1 293 1 is_stmt 1 view -0
 243              		.cfi_startproc
 244              		@ args = 0, pretend = 0, frame = 0
 245              		@ frame_needed = 0, uses_anonymous_args = 0
 246              		@ link register save eliminated.
 294:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   uint32_t tmpreg = 0;
 247              		.loc 1 294 3 view .LVU51
 295:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
 296:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Check the parameters */
 297:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_RCC_HSI14_CALIBRATION_VALUE(HSI14CalibrationValue));
 248              		.loc 1 297 3 view .LVU52
 298:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
 299:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   tmpreg = RCC->CR2;
 249              		.loc 1 299 3 view .LVU53
 250              		.loc 1 299 10 is_stmt 0 view .LVU54
 251 0000 034A     		ldr	r2, .L16
 252 0002 536B     		ldr	r3, [r2, #52]
 253              	.LVL8:
 300:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
 301:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Clear HSI14TRIM[4:0] bits */
 302:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   tmpreg &= ~RCC_CR2_HSI14TRIM;
 254              		.loc 1 302 3 is_stmt 1 view .LVU55
 255              		.loc 1 302 10 is_stmt 0 view .LVU56
 256 0004 F821     		movs	r1, #248
 257 0006 8B43     		bics	r3, r1
 258              	.LVL9:
 303:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
 304:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Set the HSITRIM14[4:0] bits according to HSI14CalibrationValue value */
 305:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   tmpreg |= (uint32_t)HSI14CalibrationValue << 3;
 259              		.loc 1 305 3 is_stmt 1 view .LVU57
 260              		.loc 1 305 45 is_stmt 0 view .LVU58
 261 0008 C000     		lsls	r0, r0, #3
 262              	.LVL10:
 263              		.loc 1 305 10 view .LVU59
 264 000a 1843     		orrs	r0, r3
 265              	.LVL11:
 306:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 307:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Store the new value */
 308:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   RCC->CR2 = tmpreg;
 266              		.loc 1 308 3 is_stmt 1 view .LVU60
 267              		.loc 1 308 12 is_stmt 0 view .LVU61
 268 000c 5063     		str	r0, [r2, #52]
 309:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** }
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 11


 269              		.loc 1 309 1 view .LVU62
 270              		@ sp needed
 271 000e 7047     		bx	lr
 272              	.L17:
 273              		.align	2
 274              	.L16:
 275 0010 00100240 		.word	1073876992
 276              		.cfi_endproc
 277              	.LFE38:
 279              		.section	.text.RCC_HSI14Cmd,"ax",%progbits
 280              		.align	1
 281              		.global	RCC_HSI14Cmd
 282              		.syntax unified
 283              		.code	16
 284              		.thumb_func
 285              		.fpu softvfp
 287              	RCC_HSI14Cmd:
 288              	.LVL12:
 289              	.LFB39:
 310:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 311:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
 312:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator for ADC (HSI14).
 313:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   After enabling the HSI14, the application software should wait on 
 314:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         HSIRDY flag to be set indicating that HSI clock is stable and can
 315:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         be used to clock the ADC.
 316:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   The HSI14 is stopped by hardware when entering STOP and STANDBY modes.
 317:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  NewState: new state of the HSI14.
 318:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 319:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   When the HSI14 is stopped, HSI14RDY flag goes low after 6 HSI14 oscillator
 320:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         clock cycles.
 321:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @retval None
 322:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
 323:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** void RCC_HSI14Cmd(FunctionalState NewState)
 324:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** {
 290              		.loc 1 324 1 is_stmt 1 view -0
 291              		.cfi_startproc
 292              		@ args = 0, pretend = 0, frame = 0
 293              		@ frame_needed = 0, uses_anonymous_args = 0
 294              		@ link register save eliminated.
 325:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Check the parameters */
 326:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 295              		.loc 1 326 3 view .LVU64
 327:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
 328:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   if (NewState != DISABLE)
 296              		.loc 1 328 3 view .LVU65
 297              		.loc 1 328 6 is_stmt 0 view .LVU66
 298 0000 0028     		cmp	r0, #0
 299 0002 05D0     		beq	.L19
 329:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 330:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC->CR2 |= RCC_CR2_HSI14ON;
 300              		.loc 1 330 5 is_stmt 1 view .LVU67
 301              		.loc 1 330 14 is_stmt 0 view .LVU68
 302 0004 054A     		ldr	r2, .L21
 303 0006 536B     		ldr	r3, [r2, #52]
 304 0008 0121     		movs	r1, #1
 305 000a 0B43     		orrs	r3, r1
 306 000c 5363     		str	r3, [r2, #52]
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 12


 307              	.L18:
 331:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 332:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   else
 333:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 334:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC->CR2 &= ~RCC_CR2_HSI14ON;
 335:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 336:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** }
 308              		.loc 1 336 1 view .LVU69
 309              		@ sp needed
 310 000e 7047     		bx	lr
 311              	.L19:
 334:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 312              		.loc 1 334 5 is_stmt 1 view .LVU70
 334:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 313              		.loc 1 334 14 is_stmt 0 view .LVU71
 314 0010 024A     		ldr	r2, .L21
 315 0012 536B     		ldr	r3, [r2, #52]
 316 0014 0121     		movs	r1, #1
 317 0016 8B43     		bics	r3, r1
 318 0018 5363     		str	r3, [r2, #52]
 319              		.loc 1 336 1 view .LVU72
 320 001a F8E7     		b	.L18
 321              	.L22:
 322              		.align	2
 323              	.L21:
 324 001c 00100240 		.word	1073876992
 325              		.cfi_endproc
 326              	.LFE39:
 328              		.section	.text.RCC_HSI14ADCRequestCmd,"ax",%progbits
 329              		.align	1
 330              		.global	RCC_HSI14ADCRequestCmd
 331              		.syntax unified
 332              		.code	16
 333              		.thumb_func
 334              		.fpu softvfp
 336              	RCC_HSI14ADCRequestCmd:
 337              	.LVL13:
 338              	.LFB40:
 337:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 338:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
 339:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator request from ADC.
 340:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  NewState: new state of the HSI14 ADC request.
 341:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 342:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @retval None
 343:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
 344:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** void RCC_HSI14ADCRequestCmd(FunctionalState NewState)
 345:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** {
 339              		.loc 1 345 1 is_stmt 1 view -0
 340              		.cfi_startproc
 341              		@ args = 0, pretend = 0, frame = 0
 342              		@ frame_needed = 0, uses_anonymous_args = 0
 343              		@ link register save eliminated.
 346:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Check the parameters */
 347:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 344              		.loc 1 347 3 view .LVU74
 348:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
 349:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   if (NewState != DISABLE)
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 13


 345              		.loc 1 349 3 view .LVU75
 346              		.loc 1 349 6 is_stmt 0 view .LVU76
 347 0000 0028     		cmp	r0, #0
 348 0002 05D0     		beq	.L24
 350:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 351:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC->CR2 &= ~RCC_CR2_HSI14DIS;
 349              		.loc 1 351 5 is_stmt 1 view .LVU77
 350              		.loc 1 351 14 is_stmt 0 view .LVU78
 351 0004 054A     		ldr	r2, .L26
 352 0006 536B     		ldr	r3, [r2, #52]
 353 0008 0421     		movs	r1, #4
 354 000a 8B43     		bics	r3, r1
 355 000c 5363     		str	r3, [r2, #52]
 356              	.L23:
 352:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 353:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   else
 354:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 355:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC->CR2 |= RCC_CR2_HSI14DIS;
 356:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 357:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** }
 357              		.loc 1 357 1 view .LVU79
 358              		@ sp needed
 359 000e 7047     		bx	lr
 360              	.L24:
 355:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 361              		.loc 1 355 5 is_stmt 1 view .LVU80
 355:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 362              		.loc 1 355 14 is_stmt 0 view .LVU81
 363 0010 024A     		ldr	r2, .L26
 364 0012 536B     		ldr	r3, [r2, #52]
 365 0014 0421     		movs	r1, #4
 366 0016 0B43     		orrs	r3, r1
 367 0018 5363     		str	r3, [r2, #52]
 368              		.loc 1 357 1 view .LVU82
 369 001a F8E7     		b	.L23
 370              	.L27:
 371              		.align	2
 372              	.L26:
 373 001c 00100240 		.word	1073876992
 374              		.cfi_endproc
 375              	.LFE40:
 377              		.section	.text.RCC_LSEConfig,"ax",%progbits
 378              		.align	1
 379              		.global	RCC_LSEConfig
 380              		.syntax unified
 381              		.code	16
 382              		.thumb_func
 383              		.fpu softvfp
 385              	RCC_LSEConfig:
 386              	.LVL14:
 387              	.LFB41:
 358:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 359:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
 360:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE).
 361:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   As the LSE is in the Backup domain and write access is denied to this
 362:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         domain after reset, you have to enable write access using 
 363:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         PWR_BackupAccessCmd(ENABLE) function before to configure the LSE
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 14


 364:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         (to be done once after reset).
 365:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   After enabling the LSE (RCC_LSE_ON or RCC_LSE_Bypass), the application
 366:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         software should wait on LSERDY flag to be set indicating that LSE clock
 367:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         is stable and can be used to clock the RTC.
 368:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  RCC_LSE: specifies the new state of the LSE.
 369:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 370:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_LSE_OFF: turn OFF the LSE oscillator, LSERDY flag goes low after
 371:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *                              6 LSE oscillator clock cycles.
 372:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_LSE_ON: turn ON the LSE oscillator
 373:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
 374:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @retval None
 375:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
 376:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** void RCC_LSEConfig(uint32_t RCC_LSE)
 377:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** {
 388              		.loc 1 377 1 is_stmt 1 view -0
 389              		.cfi_startproc
 390              		@ args = 0, pretend = 0, frame = 0
 391              		@ frame_needed = 0, uses_anonymous_args = 0
 392              		@ link register save eliminated.
 378:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Check the parameters */
 379:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_RCC_LSE(RCC_LSE));
 393              		.loc 1 379 3 view .LVU84
 380:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 381:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
 382:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Reset LSEON bit */
 383:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   RCC->BDCR &= ~(RCC_BDCR_LSEON);
 394              		.loc 1 383 3 view .LVU85
 395              		.loc 1 383 13 is_stmt 0 view .LVU86
 396 0000 064B     		ldr	r3, .L29
 397 0002 196A     		ldr	r1, [r3, #32]
 398 0004 0122     		movs	r2, #1
 399 0006 9143     		bics	r1, r2
 400 0008 1962     		str	r1, [r3, #32]
 384:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 385:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Reset LSEBYP bit */
 386:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   RCC->BDCR &= ~(RCC_BDCR_LSEBYP);
 401              		.loc 1 386 3 is_stmt 1 view .LVU87
 402              		.loc 1 386 13 is_stmt 0 view .LVU88
 403 000a 196A     		ldr	r1, [r3, #32]
 404 000c 0332     		adds	r2, r2, #3
 405 000e 9143     		bics	r1, r2
 406 0010 1962     		str	r1, [r3, #32]
 387:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 388:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Configure LSE */
 389:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   RCC->BDCR |= RCC_LSE;
 407              		.loc 1 389 3 is_stmt 1 view .LVU89
 408              		.loc 1 389 13 is_stmt 0 view .LVU90
 409 0012 1A6A     		ldr	r2, [r3, #32]
 410 0014 0243     		orrs	r2, r0
 411 0016 1A62     		str	r2, [r3, #32]
 390:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** }
 412              		.loc 1 390 1 view .LVU91
 413              		@ sp needed
 414 0018 7047     		bx	lr
 415              	.L30:
 416 001a C046     		.align	2
 417              	.L29:
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 15


 418 001c 00100240 		.word	1073876992
 419              		.cfi_endproc
 420              	.LFE41:
 422              		.section	.text.RCC_LSEDriveConfig,"ax",%progbits
 423              		.align	1
 424              		.global	RCC_LSEDriveConfig
 425              		.syntax unified
 426              		.code	16
 427              		.thumb_func
 428              		.fpu softvfp
 430              	RCC_LSEDriveConfig:
 431              	.LVL15:
 432              	.LFB42:
 391:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 392:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
 393:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE) drive capability.
 394:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  RCC_LSEDrive: specifies the new state of the LSE drive capability.
 395:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 396:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_LSEDrive_Low: LSE oscillator low drive capability.
 397:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_LSEDrive_MediumLow: LSE oscillator medium low drive capability.
 398:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_LSEDrive_MediumHigh: LSE oscillator medium high drive capability.
 399:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_LSEDrive_High: LSE oscillator high drive capability.
 400:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @retval None
 401:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
 402:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** void RCC_LSEDriveConfig(uint32_t RCC_LSEDrive)
 403:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** {
 433              		.loc 1 403 1 is_stmt 1 view -0
 434              		.cfi_startproc
 435              		@ args = 0, pretend = 0, frame = 0
 436              		@ frame_needed = 0, uses_anonymous_args = 0
 437              		@ link register save eliminated.
 404:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Check the parameters */
 405:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_RCC_LSE_DRIVE(RCC_LSEDrive));
 438              		.loc 1 405 3 view .LVU93
 406:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
 407:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Clear LSEDRV[1:0] bits */
 408:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   RCC->BDCR &= ~(RCC_BDCR_LSEDRV);
 439              		.loc 1 408 3 view .LVU94
 440              		.loc 1 408 13 is_stmt 0 view .LVU95
 441 0000 044B     		ldr	r3, .L32
 442 0002 196A     		ldr	r1, [r3, #32]
 443 0004 1822     		movs	r2, #24
 444 0006 9143     		bics	r1, r2
 445 0008 1962     		str	r1, [r3, #32]
 409:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 410:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Set the LSE Drive */
 411:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   RCC->BDCR |= RCC_LSEDrive;
 446              		.loc 1 411 3 is_stmt 1 view .LVU96
 447              		.loc 1 411 13 is_stmt 0 view .LVU97
 448 000a 1A6A     		ldr	r2, [r3, #32]
 449 000c 0243     		orrs	r2, r0
 450 000e 1A62     		str	r2, [r3, #32]
 412:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** }
 451              		.loc 1 412 1 view .LVU98
 452              		@ sp needed
 453 0010 7047     		bx	lr
 454              	.L33:
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 16


 455 0012 C046     		.align	2
 456              	.L32:
 457 0014 00100240 		.word	1073876992
 458              		.cfi_endproc
 459              	.LFE42:
 461              		.section	.text.RCC_LSICmd,"ax",%progbits
 462              		.align	1
 463              		.global	RCC_LSICmd
 464              		.syntax unified
 465              		.code	16
 466              		.thumb_func
 467              		.fpu softvfp
 469              	RCC_LSICmd:
 470              	.LVL16:
 471              	.LFB43:
 413:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 414:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
 415:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @brief  Enables or disables the Internal Low Speed oscillator (LSI).
 416:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   After enabling the LSI, the application software should wait on 
 417:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         LSIRDY flag to be set indicating that LSI clock is stable and can
 418:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         be used to clock the IWDG and/or the RTC.
 419:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   LSI can not be disabled if the IWDG is running.
 420:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  NewState: new state of the LSI.
 421:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 422:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
 423:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         clock cycles.
 424:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @retval None
 425:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
 426:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** void RCC_LSICmd(FunctionalState NewState)
 427:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** {
 472              		.loc 1 427 1 is_stmt 1 view -0
 473              		.cfi_startproc
 474              		@ args = 0, pretend = 0, frame = 0
 475              		@ frame_needed = 0, uses_anonymous_args = 0
 476              		@ link register save eliminated.
 428:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Check the parameters */
 429:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 477              		.loc 1 429 3 view .LVU100
 430:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
 431:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   if (NewState != DISABLE)
 478              		.loc 1 431 3 view .LVU101
 479              		.loc 1 431 6 is_stmt 0 view .LVU102
 480 0000 0028     		cmp	r0, #0
 481 0002 05D0     		beq	.L35
 432:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 433:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC->CSR |= RCC_CSR_LSION;
 482              		.loc 1 433 5 is_stmt 1 view .LVU103
 483              		.loc 1 433 14 is_stmt 0 view .LVU104
 484 0004 054A     		ldr	r2, .L37
 485 0006 536A     		ldr	r3, [r2, #36]
 486 0008 0121     		movs	r1, #1
 487 000a 0B43     		orrs	r3, r1
 488 000c 5362     		str	r3, [r2, #36]
 489              	.L34:
 434:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 435:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   else
 436:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 17


 437:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC->CSR &= ~RCC_CSR_LSION;
 438:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 439:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** }
 490              		.loc 1 439 1 view .LVU105
 491              		@ sp needed
 492 000e 7047     		bx	lr
 493              	.L35:
 437:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 494              		.loc 1 437 5 is_stmt 1 view .LVU106
 437:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 495              		.loc 1 437 14 is_stmt 0 view .LVU107
 496 0010 024A     		ldr	r2, .L37
 497 0012 536A     		ldr	r3, [r2, #36]
 498 0014 0121     		movs	r1, #1
 499 0016 8B43     		bics	r3, r1
 500 0018 5362     		str	r3, [r2, #36]
 501              		.loc 1 439 1 view .LVU108
 502 001a F8E7     		b	.L34
 503              	.L38:
 504              		.align	2
 505              	.L37:
 506 001c 00100240 		.word	1073876992
 507              		.cfi_endproc
 508              	.LFE43:
 510              		.section	.text.RCC_PLLConfig,"ax",%progbits
 511              		.align	1
 512              		.global	RCC_PLLConfig
 513              		.syntax unified
 514              		.code	16
 515              		.thumb_func
 516              		.fpu softvfp
 518              	RCC_PLLConfig:
 519              	.LVL17:
 520              	.LFB44:
 440:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 441:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
 442:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @brief  Configures the PLL clock source and multiplication factor.
 443:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   This function must be used only when the PLL is disabled.
 444:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *
 445:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 446:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 447:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_PLLSource_HSI_Div2: HSI oscillator clock selected as PLL clock source
 448:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_PLLSource_PREDIV1: PREDIV1 clock selected as PLL clock entry
 449:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_PLLSource_HSI48 HSI48 oscillator clock selected as PLL clock source, applic
 450:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_PLLSource_HSI: HSI clock selected as PLL clock entry, applicable only for H
 451:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   The minimum input clock frequency for PLL is 2 MHz (when using HSE as
 452:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         PLL source).
 453:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *
 454:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  RCC_PLLMul: specifies the PLL multiplication factor, which drive the PLLVCO clock
 455:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter can be RCC_PLLMul_x where x:[2,16] 
 456:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *
 457:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @retval None
 458:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
 459:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
 460:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** {
 521              		.loc 1 460 1 is_stmt 1 view -0
 522              		.cfi_startproc
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 18


 523              		@ args = 0, pretend = 0, frame = 0
 524              		@ frame_needed = 0, uses_anonymous_args = 0
 525              		.loc 1 460 1 is_stmt 0 view .LVU110
 526 0000 10B5     		push	{r4, lr}
 527              	.LCFI0:
 528              		.cfi_def_cfa_offset 8
 529              		.cfi_offset 4, -8
 530              		.cfi_offset 14, -4
 461:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Check the parameters */
 462:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 531              		.loc 1 462 3 is_stmt 1 view .LVU111
 463:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));
 532              		.loc 1 463 3 view .LVU112
 464:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 465:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Clear PLL Source [16] and Multiplier [21:18] bits */
 466:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   RCC->CFGR &= ~(RCC_CFGR_PLLMULL | RCC_CFGR_PLLSRC);
 533              		.loc 1 466 3 view .LVU113
 534              		.loc 1 466 13 is_stmt 0 view .LVU114
 535 0002 054B     		ldr	r3, .L40
 536 0004 5C68     		ldr	r4, [r3, #4]
 537 0006 054A     		ldr	r2, .L40+4
 538 0008 1440     		ands	r4, r2
 539 000a 5C60     		str	r4, [r3, #4]
 467:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 468:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Set the PLL Source and Multiplier */
 469:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   RCC->CFGR |= (uint32_t)(RCC_PLLSource | RCC_PLLMul);
 540              		.loc 1 469 3 is_stmt 1 view .LVU115
 541              		.loc 1 469 13 is_stmt 0 view .LVU116
 542 000c 5A68     		ldr	r2, [r3, #4]
 543              		.loc 1 469 41 view .LVU117
 544 000e 0843     		orrs	r0, r1
 545              	.LVL18:
 546              		.loc 1 469 13 view .LVU118
 547 0010 0243     		orrs	r2, r0
 548 0012 5A60     		str	r2, [r3, #4]
 470:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** }
 549              		.loc 1 470 1 view .LVU119
 550              		@ sp needed
 551 0014 10BD     		pop	{r4, pc}
 552              	.L41:
 553 0016 C046     		.align	2
 554              	.L40:
 555 0018 00100240 		.word	1073876992
 556 001c FF7FC2FF 		.word	-4030465
 557              		.cfi_endproc
 558              	.LFE44:
 560              		.section	.text.RCC_PLLCmd,"ax",%progbits
 561              		.align	1
 562              		.global	RCC_PLLCmd
 563              		.syntax unified
 564              		.code	16
 565              		.thumb_func
 566              		.fpu softvfp
 568              	RCC_PLLCmd:
 569              	.LVL19:
 570              	.LFB45:
 471:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 19


 472:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
 473:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @brief  Enables or disables the PLL.
 474:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   After enabling the PLL, the application software should wait on 
 475:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         PLLRDY flag to be set indicating that PLL clock is stable and can
 476:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         be used as system clock source.
 477:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   The PLL can not be disabled if it is used as system clock source
 478:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   The PLL is disabled by hardware when entering STOP and STANDBY modes.
 479:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  NewState: new state of the PLL.
 480:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 481:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @retval None
 482:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
 483:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** void RCC_PLLCmd(FunctionalState NewState)
 484:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** {
 571              		.loc 1 484 1 is_stmt 1 view -0
 572              		.cfi_startproc
 573              		@ args = 0, pretend = 0, frame = 0
 574              		@ frame_needed = 0, uses_anonymous_args = 0
 575              		@ link register save eliminated.
 485:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Check the parameters */
 486:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 576              		.loc 1 486 3 view .LVU121
 487:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
 488:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   if (NewState != DISABLE)
 577              		.loc 1 488 3 view .LVU122
 578              		.loc 1 488 6 is_stmt 0 view .LVU123
 579 0000 0028     		cmp	r0, #0
 580 0002 06D0     		beq	.L43
 489:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 490:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC->CR |= RCC_CR_PLLON;
 581              		.loc 1 490 5 is_stmt 1 view .LVU124
 582              		.loc 1 490 13 is_stmt 0 view .LVU125
 583 0004 064A     		ldr	r2, .L45
 584 0006 1168     		ldr	r1, [r2]
 585 0008 8023     		movs	r3, #128
 586 000a 5B04     		lsls	r3, r3, #17
 587 000c 0B43     		orrs	r3, r1
 588 000e 1360     		str	r3, [r2]
 589              	.L42:
 491:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 492:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   else
 493:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 494:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC->CR &= ~RCC_CR_PLLON;
 495:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 496:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** }
 590              		.loc 1 496 1 view .LVU126
 591              		@ sp needed
 592 0010 7047     		bx	lr
 593              	.L43:
 494:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 594              		.loc 1 494 5 is_stmt 1 view .LVU127
 494:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 595              		.loc 1 494 13 is_stmt 0 view .LVU128
 596 0012 034A     		ldr	r2, .L45
 597 0014 1368     		ldr	r3, [r2]
 598 0016 0349     		ldr	r1, .L45+4
 599 0018 0B40     		ands	r3, r1
 600 001a 1360     		str	r3, [r2]
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 20


 601              		.loc 1 496 1 view .LVU129
 602 001c F8E7     		b	.L42
 603              	.L46:
 604 001e C046     		.align	2
 605              	.L45:
 606 0020 00100240 		.word	1073876992
 607 0024 FFFFFFFE 		.word	-16777217
 608              		.cfi_endproc
 609              	.LFE45:
 611              		.section	.text.RCC_HSI48Cmd,"ax",%progbits
 612              		.align	1
 613              		.global	RCC_HSI48Cmd
 614              		.syntax unified
 615              		.code	16
 616              		.thumb_func
 617              		.fpu softvfp
 619              	RCC_HSI48Cmd:
 620              	.LVL20:
 621              	.LFB46:
 497:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 498:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
 499:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator for USB (HSI48).
 500:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         This function is only applicable for HK32F072 devices.  
 501:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   After enabling the HSI48, the application software should wait on 
 502:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         HSI48RDY flag to be set indicating that HSI48 clock is stable and can
 503:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         be used to clock the USB.
 504:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   The HSI48 is stopped by hardware when entering STOP and STANDBY modes.
 505:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  NewState: new state of the HSI48.
 506:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 507:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @retval None
 508:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
 509:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** void RCC_HSI48Cmd(FunctionalState NewState)
 510:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** {
 622              		.loc 1 510 1 is_stmt 1 view -0
 623              		.cfi_startproc
 624              		@ args = 0, pretend = 0, frame = 0
 625              		@ frame_needed = 0, uses_anonymous_args = 0
 626              		@ link register save eliminated.
 511:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Check the parameters */
 512:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 627              		.loc 1 512 3 view .LVU131
 513:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
 514:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   if (NewState != DISABLE)
 628              		.loc 1 514 3 view .LVU132
 629              		.loc 1 514 6 is_stmt 0 view .LVU133
 630 0000 0028     		cmp	r0, #0
 631 0002 06D0     		beq	.L48
 515:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 516:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC->CR2 |= RCC_CR2_HSI48ON;
 632              		.loc 1 516 5 is_stmt 1 view .LVU134
 633              		.loc 1 516 14 is_stmt 0 view .LVU135
 634 0004 064A     		ldr	r2, .L50
 635 0006 516B     		ldr	r1, [r2, #52]
 636 0008 8023     		movs	r3, #128
 637 000a 5B02     		lsls	r3, r3, #9
 638 000c 0B43     		orrs	r3, r1
 639 000e 5363     		str	r3, [r2, #52]
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 21


 640              	.L47:
 517:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 518:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   else
 519:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 520:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC->CR2 &= ~RCC_CR2_HSI48ON;
 521:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 522:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** }
 641              		.loc 1 522 1 view .LVU136
 642              		@ sp needed
 643 0010 7047     		bx	lr
 644              	.L48:
 520:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 645              		.loc 1 520 5 is_stmt 1 view .LVU137
 520:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 646              		.loc 1 520 14 is_stmt 0 view .LVU138
 647 0012 034A     		ldr	r2, .L50
 648 0014 536B     		ldr	r3, [r2, #52]
 649 0016 0349     		ldr	r1, .L50+4
 650 0018 0B40     		ands	r3, r1
 651 001a 5363     		str	r3, [r2, #52]
 652              		.loc 1 522 1 view .LVU139
 653 001c F8E7     		b	.L47
 654              	.L51:
 655 001e C046     		.align	2
 656              	.L50:
 657 0020 00100240 		.word	1073876992
 658 0024 FFFFFEFF 		.word	-65537
 659              		.cfi_endproc
 660              	.LFE46:
 662              		.section	.text.RCC_PREDIV1Config,"ax",%progbits
 663              		.align	1
 664              		.global	RCC_PREDIV1Config
 665              		.syntax unified
 666              		.code	16
 667              		.thumb_func
 668              		.fpu softvfp
 670              	RCC_PREDIV1Config:
 671              	.LVL21:
 672              	.LFB47:
 523:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 524:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
 525:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @brief  Configures the PREDIV1 division factor.
 526:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   This function must be used only when the PLL is disabled.
 527:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  RCC_PREDIV1_Div: specifies the PREDIV1 clock division factor.
 528:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter can be RCC_PREDIV1_Divx where x:[1,16]
 529:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @retval None
 530:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
 531:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** void RCC_PREDIV1Config(uint32_t RCC_PREDIV1_Div)
 532:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** {
 673              		.loc 1 532 1 is_stmt 1 view -0
 674              		.cfi_startproc
 675              		@ args = 0, pretend = 0, frame = 0
 676              		@ frame_needed = 0, uses_anonymous_args = 0
 677              		@ link register save eliminated.
 533:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   uint32_t tmpreg = 0;
 678              		.loc 1 533 3 view .LVU141
 534:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 22


 535:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Check the parameters */
 536:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));
 679              		.loc 1 536 3 view .LVU142
 537:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 538:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   tmpreg = RCC->CFGR2;
 680              		.loc 1 538 3 view .LVU143
 681              		.loc 1 538 10 is_stmt 0 view .LVU144
 682 0000 034A     		ldr	r2, .L53
 683 0002 D36A     		ldr	r3, [r2, #44]
 684              	.LVL22:
 539:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Clear PREDIV1[3:0] bits */
 540:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   tmpreg &= ~(RCC_CFGR2_PREDIV1);
 685              		.loc 1 540 3 is_stmt 1 view .LVU145
 686              		.loc 1 540 10 is_stmt 0 view .LVU146
 687 0004 0F21     		movs	r1, #15
 688 0006 8B43     		bics	r3, r1
 689              	.LVL23:
 541:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Set the PREDIV1 division factor */
 542:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   tmpreg |= RCC_PREDIV1_Div;
 690              		.loc 1 542 3 is_stmt 1 view .LVU147
 691              		.loc 1 542 10 is_stmt 0 view .LVU148
 692 0008 0343     		orrs	r3, r0
 693              	.LVL24:
 543:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Store the new value */
 544:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   RCC->CFGR2 = tmpreg;
 694              		.loc 1 544 3 is_stmt 1 view .LVU149
 695              		.loc 1 544 14 is_stmt 0 view .LVU150
 696 000a D362     		str	r3, [r2, #44]
 545:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** }
 697              		.loc 1 545 1 view .LVU151
 698              		@ sp needed
 699 000c 7047     		bx	lr
 700              	.L54:
 701 000e C046     		.align	2
 702              	.L53:
 703 0010 00100240 		.word	1073876992
 704              		.cfi_endproc
 705              	.LFE47:
 707              		.section	.text.RCC_ClockSecuritySystemCmd,"ax",%progbits
 708              		.align	1
 709              		.global	RCC_ClockSecuritySystemCmd
 710              		.syntax unified
 711              		.code	16
 712              		.thumb_func
 713              		.fpu softvfp
 715              	RCC_ClockSecuritySystemCmd:
 716              	.LVL25:
 717              	.LFB48:
 546:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 547:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
 548:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @brief  Enables or disables the Clock Security System.
 549:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
 550:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
 551:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
 552:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to 
 553:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         the Cortex-M0 NMI (Non-Maskable Interrupt) exception vector.
 554:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  NewState: new state of the Clock Security System.
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 23


 555:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 556:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @retval None
 557:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
 558:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
 559:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** {
 718              		.loc 1 559 1 is_stmt 1 view -0
 719              		.cfi_startproc
 720              		@ args = 0, pretend = 0, frame = 0
 721              		@ frame_needed = 0, uses_anonymous_args = 0
 722              		@ link register save eliminated.
 560:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Check the parameters */
 561:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 723              		.loc 1 561 3 view .LVU153
 562:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
 563:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   if (NewState != DISABLE)
 724              		.loc 1 563 3 view .LVU154
 725              		.loc 1 563 6 is_stmt 0 view .LVU155
 726 0000 0028     		cmp	r0, #0
 727 0002 06D0     		beq	.L56
 564:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 565:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC->CR |= RCC_CR_CSSON;
 728              		.loc 1 565 5 is_stmt 1 view .LVU156
 729              		.loc 1 565 13 is_stmt 0 view .LVU157
 730 0004 064A     		ldr	r2, .L58
 731 0006 1168     		ldr	r1, [r2]
 732 0008 8023     		movs	r3, #128
 733 000a 1B03     		lsls	r3, r3, #12
 734 000c 0B43     		orrs	r3, r1
 735 000e 1360     		str	r3, [r2]
 736              	.L55:
 566:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 567:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   else
 568:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 569:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC->CR &= ~RCC_CR_CSSON;
 570:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 571:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** }
 737              		.loc 1 571 1 view .LVU158
 738              		@ sp needed
 739 0010 7047     		bx	lr
 740              	.L56:
 569:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 741              		.loc 1 569 5 is_stmt 1 view .LVU159
 569:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 742              		.loc 1 569 13 is_stmt 0 view .LVU160
 743 0012 034A     		ldr	r2, .L58
 744 0014 1368     		ldr	r3, [r2]
 745 0016 0349     		ldr	r1, .L58+4
 746 0018 0B40     		ands	r3, r1
 747 001a 1360     		str	r3, [r2]
 748              		.loc 1 571 1 view .LVU161
 749 001c F8E7     		b	.L55
 750              	.L59:
 751 001e C046     		.align	2
 752              	.L58:
 753 0020 00100240 		.word	1073876992
 754 0024 FFFFF7FF 		.word	-524289
 755              		.cfi_endproc
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 24


 756              	.LFE48:
 758              		.section	.text.RCC_MCOConfig,"ax",%progbits
 759              		.align	1
 760              		.global	RCC_MCOConfig
 761              		.syntax unified
 762              		.code	16
 763              		.thumb_func
 764              		.fpu softvfp
 766              	RCC_MCOConfig:
 767              	.LVL26:
 768              	.LFB49:
 572:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 573:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** #ifdef HK32F051
 574:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
 575:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @brief  Selects the clock source to output on MCO pin (PA8).
 576:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   PA8 should be configured in alternate function mode.
 577:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  RCC_MCOSource: specifies the clock source to output.
 578:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 579:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_MCOSource_NoClock: No clock selected.
 580:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_MCOSource_HSI14: HSI14 oscillator clock selected.
 581:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_MCOSource_LSI: LSI oscillator clock selected.
 582:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_MCOSource_LSE: LSE oscillator clock selected.
 583:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_MCOSource_SYSCLK: System clock selected.
 584:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_MCOSource_HSI: HSI oscillator clock selected.
 585:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_MCOSource_HSE: HSE oscillator clock selected.
 586:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_MCOSource_PLLCLK_Div2: PLL clock divided by 2 selected.
 587:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @retval None
 588:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
 589:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** void RCC_MCOConfig(uint8_t RCC_MCOSource)
 590:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** {
 591:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Check the parameters */
 592:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_RCC_MCO_SOURCE(RCC_MCOSource));
 593:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 594:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Select MCO clock source and prescaler */
 595:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *(__IO uint8_t *) CFGR_BYTE3_ADDRESS =  RCC_MCOSource;
 596:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** }
 597:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** #else
 598:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 599:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
 600:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @brief  Selects the clock source to output on MCO pin (PA8) and the corresponding
 601:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         prescsaler.
 602:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   PA8 should be configured in alternate function mode.
 603:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  RCC_MCOSource: specifies the clock source to output.
 604:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 605:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_MCOSource_NoClock: No clock selected.
 606:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_MCOSource_HSI14: HSI14 oscillator clock selected.
 607:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_MCOSource_LSI: LSI oscillator clock selected.
 608:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_MCOSource_LSE: LSE oscillator clock selected.
 609:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_MCOSource_SYSCLK: System clock selected.
 610:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_MCOSource_HSI: HSI oscillator clock selected.
 611:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_MCOSource_HSE: HSE oscillator clock selected.
 612:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_MCOSource_PLLCLK_Div2: PLL clock divided by 2 selected.
 613:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_MCOSource_PLLCLK: PLL clock selected.
 614:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_MCOSource_HSI48: HSI48 clock selected.
 615:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  RCC_MCOPrescaler: specifies the prescaler on MCO pin.
 616:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 617:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_MCOPrescaler_1: MCO clock is divided by 1.
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 25


 618:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_MCOPrescaler_2: MCO clock is divided by 2.
 619:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_MCOPrescaler_4: MCO clock is divided by 4.
 620:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_MCOPrescaler_8: MCO clock is divided by 8.
 621:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_MCOPrescaler_16: MCO clock is divided by 16.
 622:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_MCOPrescaler_32: MCO clock is divided by 32.
 623:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_MCOPrescaler_64: MCO clock is divided by 64.
 624:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_MCOPrescaler_128: MCO clock is divided by 128.    
 625:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @retval None
 626:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
 627:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** void RCC_MCOConfig(uint8_t RCC_MCOSource, uint32_t RCC_MCOPrescaler)
 628:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** {
 769              		.loc 1 628 1 is_stmt 1 view -0
 770              		.cfi_startproc
 771              		@ args = 0, pretend = 0, frame = 0
 772              		@ frame_needed = 0, uses_anonymous_args = 0
 773              		@ link register save eliminated.
 629:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   uint32_t tmpreg = 0;
 774              		.loc 1 629 3 view .LVU163
 630:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
 631:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Check the parameters */
 632:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_RCC_MCO_SOURCE(RCC_MCOSource));
 775              		.loc 1 632 3 view .LVU164
 633:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_RCC_MCO_PRESCALER(RCC_MCOPrescaler));
 776              		.loc 1 633 3 view .LVU165
 634:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     
 635:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Get CFGR value */  
 636:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   tmpreg = RCC->CFGR;
 777              		.loc 1 636 3 view .LVU166
 778              		.loc 1 636 10 is_stmt 0 view .LVU167
 779 0000 044A     		ldr	r2, .L61
 780 0002 5368     		ldr	r3, [r2, #4]
 781              	.LVL27:
 637:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Clear MCOPRE[2:0] bits */
 638:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   tmpreg &= ~(RCC_CFGR_MCO_PRE | RCC_CFGR_MCO | RCC_CFGR_PLLNODIV);
 782              		.loc 1 638 3 is_stmt 1 view .LVU168
 783              		.loc 1 638 10 is_stmt 0 view .LVU169
 784 0004 1B02     		lsls	r3, r3, #8
 785              	.LVL28:
 786              		.loc 1 638 10 view .LVU170
 787 0006 1B0A     		lsrs	r3, r3, #8
 788              	.LVL29:
 639:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Set the RCC_MCOSource and RCC_MCOPrescaler */
 640:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   tmpreg |= (RCC_MCOPrescaler | ((uint32_t)RCC_MCOSource<<24));
 789              		.loc 1 640 3 is_stmt 1 view .LVU171
 790              		.loc 1 640 57 is_stmt 0 view .LVU172
 791 0008 0006     		lsls	r0, r0, #24
 792              	.LVL30:
 793              		.loc 1 640 31 view .LVU173
 794 000a 0843     		orrs	r0, r1
 795              		.loc 1 640 10 view .LVU174
 796 000c 1843     		orrs	r0, r3
 797              	.LVL31:
 641:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Store the new value */
 642:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   RCC->CFGR = tmpreg;
 798              		.loc 1 642 3 is_stmt 1 view .LVU175
 799              		.loc 1 642 13 is_stmt 0 view .LVU176
 800 000e 5060     		str	r0, [r2, #4]
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 26


 643:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** }
 801              		.loc 1 643 1 view .LVU177
 802              		@ sp needed
 803 0010 7047     		bx	lr
 804              	.L62:
 805 0012 C046     		.align	2
 806              	.L61:
 807 0014 00100240 		.word	1073876992
 808              		.cfi_endproc
 809              	.LFE49:
 811              		.section	.text.RCC_SYSCLKConfig,"ax",%progbits
 812              		.align	1
 813              		.global	RCC_SYSCLKConfig
 814              		.syntax unified
 815              		.code	16
 816              		.thumb_func
 817              		.fpu softvfp
 819              	RCC_SYSCLKConfig:
 820              	.LVL32:
 821              	.LFB50:
 644:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** #endif /* HK32F072 */
 645:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 646:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
 647:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @}
 648:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
 649:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 650:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /** @defgroup RCC_Group2 System AHB and APB busses clocks configuration functions
 651:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****  *  @brief   System, AHB and APB busses clocks configuration functions
 652:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****  *
 653:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** @verbatim
 654:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****  ===============================================================================
 655:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****      ##### System, AHB and APB busses clocks configuration functions #####
 656:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****  ===============================================================================
 657:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 658:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     [..] This section provide functions allowing to configure the System, AHB and 
 659:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****          APB busses clocks.
 660:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****          (#) Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 661:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****              HSE and PLL.
 662:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****              The AHB clock (HCLK) is derived from System clock through configurable prescaler
 663:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****              and used to clock the CPU, memory and peripherals mapped on AHB bus (DMA and GPIO).
 664:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****              and APB (PCLK) clocks are derived from AHB clock through 
 665:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****              configurable prescalers and used to clock the peripherals mapped on these busses.
 666:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****              You can use "RCC_GetClocksFreq()" function to retrieve the frequencies of these clocks
 667:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 668:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****          -@- All the peripheral clocks are derived from the System clock (SYSCLK) except:
 669:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****              (+@) The ADC clock which is derived from HSI14 or APB (APB divided by a
 670:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****                   programmable prescaler: 2 or 4).
 671:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****              (+@) The CEC clock which is derived from LSE or HSI divided by 244.
 672:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****              (+@) The I2C clock which is derived from HSI or system clock (SYSCLK).
 673:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****              (+@) The USART clock which is derived from HSI, system clock (SYSCLK), APB or LSE.
 674:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****              (+@) The RTC/LCD clock which is derived from the LSE, LSI or 2 MHz HSE_RTC (HSE
 675:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****                   divided by a programmable prescaler).
 676:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****                   The System clock (SYSCLK) frequency must be higher or equal to the RTC/LCD
 677:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****                   clock frequency.
 678:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****              (+@) IWDG clock which is always the LSI clock.
 679:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****        
 680:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****          (#) The maximum frequency of the SYSCLK, HCLK and PCLK is 48 MHz.
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 27


 681:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****              Depending on the maximum frequency, the FLASH wait states (WS) should be 
 682:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****              adapted accordingly:
 683:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****         +--------------------------------------------- +
 684:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****         |  Wait states  |   HCLK clock frequency (MHz) |
 685:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****         |---------------|------------------------------|
 686:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****         |0WS(1CPU cycle)|       0 < HCLK <= 24         |
 687:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****         |---------------|------------------------------|
 688:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****         |1WS(2CPU cycle)|       24 < HCLK <= 48        |
 689:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****         +----------------------------------------------+
 690:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 691:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****          (#) After reset, the System clock source is the HSI (8 MHz) with 0 WS and 
 692:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****              prefetch is disabled.
 693:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
 694:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     [..] It is recommended to use the following software sequences to tune the number
 695:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****          of wait states needed to access the Flash memory with the CPU frequency (HCLK).
 696:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****          (+) Increasing the CPU frequency
 697:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****          (++) Program the Flash Prefetch buffer, using "FLASH_PrefetchBufferCmd(ENABLE)" 
 698:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****               function
 699:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****          (++) Check that Flash Prefetch buffer activation is taken into account by 
 700:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****               reading FLASH_ACR using the FLASH_GetPrefetchBufferStatus() function
 701:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****          (++) Program Flash WS to 1, using "FLASH_SetLatency(FLASH_Latency_1)" function
 702:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****          (++) Check that the new number of WS is taken into account by reading FLASH_ACR
 703:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****          (++) Modify the CPU clock source, using "RCC_SYSCLKConfig()" function
 704:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****          (++) If needed, modify the CPU clock prescaler by using "RCC_HCLKConfig()" function
 705:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****          (++) Check that the new CPU clock source is taken into account by reading 
 706:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****               the clock source status, using "RCC_GetSYSCLKSource()" function 
 707:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****          (+) Decreasing the CPU frequency
 708:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****          (++) Modify the CPU clock source, using "RCC_SYSCLKConfig()" function
 709:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****          (++) If needed, modify the CPU clock prescaler by using "RCC_HCLKConfig()" function
 710:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****          (++) Check that the new CPU clock source is taken into account by reading 
 711:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****               the clock source status, using "RCC_GetSYSCLKSource()" function
 712:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****          (++) Program the new number of WS, using "FLASH_SetLatency()" function
 713:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****          (++) Check that the new number of WS is taken into account by reading FLASH_ACR
 714:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****          (++) Disable the Flash Prefetch buffer using "FLASH_PrefetchBufferCmd(DISABLE)" 
 715:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****               function
 716:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****          (++) Check that Flash Prefetch buffer deactivation is taken into account by reading FLASH_
 717:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****               using the FLASH_GetPrefetchBufferStatus() function.
 718:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 719:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** @endverbatim
 720:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @{
 721:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
 722:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 723:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
 724:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @brief  Configures the system clock (SYSCLK).
 725:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
 726:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         startup from Reset, wake-up from STOP and STANDBY mode, or in case
 727:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
 728:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         (if the Clock Security System CSS is enabled).
 729:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
 730:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         clock source is ready (clock stable after startup delay or PLL locked). 
 731:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
 732:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         occur when the clock source will be ready. 
 733:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         You can use RCC_GetSYSCLKSource() function to know which clock is
 734:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         currently used as system clock source.  
 735:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  RCC_SYSCLKSource: specifies the clock source used as system clock source 
 736:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 737:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSI:    HSI selected as system clock source
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 28


 738:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
 739:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
 740:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSI48:  HSI48 selected as system clock source, applicable only
 741:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @retval None
 742:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
 743:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
 744:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** {
 822              		.loc 1 744 1 is_stmt 1 view -0
 823              		.cfi_startproc
 824              		@ args = 0, pretend = 0, frame = 0
 825              		@ frame_needed = 0, uses_anonymous_args = 0
 826              		@ link register save eliminated.
 745:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   uint32_t tmpreg = 0;
 827              		.loc 1 745 3 view .LVU179
 746:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
 747:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Check the parameters */
 748:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
 828              		.loc 1 748 3 view .LVU180
 749:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
 750:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   tmpreg = RCC->CFGR;
 829              		.loc 1 750 3 view .LVU181
 830              		.loc 1 750 10 is_stmt 0 view .LVU182
 831 0000 034A     		ldr	r2, .L64
 832 0002 5368     		ldr	r3, [r2, #4]
 833              	.LVL33:
 751:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
 752:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Clear SW[1:0] bits */
 753:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   tmpreg &= ~RCC_CFGR_SW;
 834              		.loc 1 753 3 is_stmt 1 view .LVU183
 835              		.loc 1 753 10 is_stmt 0 view .LVU184
 836 0004 0321     		movs	r1, #3
 837 0006 8B43     		bics	r3, r1
 838              	.LVL34:
 754:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
 755:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
 756:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   tmpreg |= RCC_SYSCLKSource;
 839              		.loc 1 756 3 is_stmt 1 view .LVU185
 840              		.loc 1 756 10 is_stmt 0 view .LVU186
 841 0008 0343     		orrs	r3, r0
 842              	.LVL35:
 757:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
 758:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Store the new value */
 759:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   RCC->CFGR = tmpreg;
 843              		.loc 1 759 3 is_stmt 1 view .LVU187
 844              		.loc 1 759 13 is_stmt 0 view .LVU188
 845 000a 5360     		str	r3, [r2, #4]
 760:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** }
 846              		.loc 1 760 1 view .LVU189
 847              		@ sp needed
 848 000c 7047     		bx	lr
 849              	.L65:
 850 000e C046     		.align	2
 851              	.L64:
 852 0010 00100240 		.word	1073876992
 853              		.cfi_endproc
 854              	.LFE50:
 856              		.section	.text.RCC_GetSYSCLKSource,"ax",%progbits
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 29


 857              		.align	1
 858              		.global	RCC_GetSYSCLKSource
 859              		.syntax unified
 860              		.code	16
 861              		.thumb_func
 862              		.fpu softvfp
 864              	RCC_GetSYSCLKSource:
 865              	.LFB51:
 761:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 762:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
 763:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @brief  Returns the clock source used as system clock.
 764:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  None
 765:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @retval The clock source used as system clock. The returned value can be one 
 766:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         of the following values:
 767:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *           - 0x00: HSI used as system clock
 768:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *           - 0x04: HSE used as system clock  
 769:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *           - 0x08: PLL used as system clock
 770:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *           - 0x0C: HSI48 used as system clock, applicable only for HK32F072 devices  
 771:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
 772:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** uint8_t RCC_GetSYSCLKSource(void)
 773:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** {
 866              		.loc 1 773 1 is_stmt 1 view -0
 867              		.cfi_startproc
 868              		@ args = 0, pretend = 0, frame = 0
 869              		@ frame_needed = 0, uses_anonymous_args = 0
 870              		@ link register save eliminated.
 774:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 871              		.loc 1 774 3 view .LVU191
 872              		.loc 1 774 24 is_stmt 0 view .LVU192
 873 0000 024B     		ldr	r3, .L67
 874 0002 5B68     		ldr	r3, [r3, #4]
 875              		.loc 1 774 11 view .LVU193
 876 0004 0C20     		movs	r0, #12
 877 0006 1840     		ands	r0, r3
 775:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** }
 878              		.loc 1 775 1 view .LVU194
 879              		@ sp needed
 880 0008 7047     		bx	lr
 881              	.L68:
 882 000a C046     		.align	2
 883              	.L67:
 884 000c 00100240 		.word	1073876992
 885              		.cfi_endproc
 886              	.LFE51:
 888              		.section	.text.RCC_HCLKConfig,"ax",%progbits
 889              		.align	1
 890              		.global	RCC_HCLKConfig
 891              		.syntax unified
 892              		.code	16
 893              		.thumb_func
 894              		.fpu softvfp
 896              	RCC_HCLKConfig:
 897              	.LVL36:
 898              	.LFB52:
 776:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 777:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
 778:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @brief  Configures the AHB clock (HCLK).
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 30


 779:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  RCC_SYSCLK: defines the AHB clock divider. This clock is derived from 
 780:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         the system clock (SYSCLK).
 781:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 782:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_SYSCLK_Div1:   AHB clock = SYSCLK
 783:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_SYSCLK_Div2:   AHB clock = SYSCLK/2
 784:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_SYSCLK_Div4:   AHB clock = SYSCLK/4
 785:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_SYSCLK_Div8:   AHB clock = SYSCLK/8
 786:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_SYSCLK_Div16:  AHB clock = SYSCLK/16
 787:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_SYSCLK_Div64:  AHB clock = SYSCLK/64
 788:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_SYSCLK_Div128: AHB clock = SYSCLK/128
 789:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
 790:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
 791:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @retval None
 792:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
 793:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
 794:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** {
 899              		.loc 1 794 1 is_stmt 1 view -0
 900              		.cfi_startproc
 901              		@ args = 0, pretend = 0, frame = 0
 902              		@ frame_needed = 0, uses_anonymous_args = 0
 903              		@ link register save eliminated.
 795:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   uint32_t tmpreg = 0;
 904              		.loc 1 795 3 view .LVU196
 796:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
 797:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Check the parameters */
 798:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_RCC_HCLK(RCC_SYSCLK));
 905              		.loc 1 798 3 view .LVU197
 799:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
 800:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   tmpreg = RCC->CFGR;
 906              		.loc 1 800 3 view .LVU198
 907              		.loc 1 800 10 is_stmt 0 view .LVU199
 908 0000 034A     		ldr	r2, .L70
 909 0002 5368     		ldr	r3, [r2, #4]
 910              	.LVL37:
 801:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
 802:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Clear HPRE[3:0] bits */
 803:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   tmpreg &= ~RCC_CFGR_HPRE;
 911              		.loc 1 803 3 is_stmt 1 view .LVU200
 912              		.loc 1 803 10 is_stmt 0 view .LVU201
 913 0004 F021     		movs	r1, #240
 914 0006 8B43     		bics	r3, r1
 915              	.LVL38:
 804:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
 805:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
 806:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   tmpreg |= RCC_SYSCLK;
 916              		.loc 1 806 3 is_stmt 1 view .LVU202
 917              		.loc 1 806 10 is_stmt 0 view .LVU203
 918 0008 0343     		orrs	r3, r0
 919              	.LVL39:
 807:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
 808:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Store the new value */
 809:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   RCC->CFGR = tmpreg;
 920              		.loc 1 809 3 is_stmt 1 view .LVU204
 921              		.loc 1 809 13 is_stmt 0 view .LVU205
 922 000a 5360     		str	r3, [r2, #4]
 810:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** }
 923              		.loc 1 810 1 view .LVU206
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 31


 924              		@ sp needed
 925 000c 7047     		bx	lr
 926              	.L71:
 927 000e C046     		.align	2
 928              	.L70:
 929 0010 00100240 		.word	1073876992
 930              		.cfi_endproc
 931              	.LFE52:
 933              		.section	.text.RCC_PCLKConfig,"ax",%progbits
 934              		.align	1
 935              		.global	RCC_PCLKConfig
 936              		.syntax unified
 937              		.code	16
 938              		.thumb_func
 939              		.fpu softvfp
 941              	RCC_PCLKConfig:
 942              	.LVL40:
 943              	.LFB53:
 811:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 812:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
 813:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @brief  Configures the APB clock (PCLK).
 814:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  RCC_HCLK: defines the APB clock divider. This clock is derived from 
 815:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         the AHB clock (HCLK).
 816:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 817:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_HCLK_Div1: APB clock = HCLK
 818:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_HCLK_Div2: APB clock = HCLK/2
 819:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_HCLK_Div4: APB clock = HCLK/4
 820:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_HCLK_Div8: APB clock = HCLK/8
 821:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB clock = HCLK/16
 822:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @retval None
 823:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
 824:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** void RCC_PCLKConfig(uint32_t RCC_HCLK)
 825:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** {
 944              		.loc 1 825 1 is_stmt 1 view -0
 945              		.cfi_startproc
 946              		@ args = 0, pretend = 0, frame = 0
 947              		@ frame_needed = 0, uses_anonymous_args = 0
 948              		@ link register save eliminated.
 826:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   uint32_t tmpreg = 0;
 949              		.loc 1 826 3 view .LVU208
 827:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
 828:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Check the parameters */
 829:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 950              		.loc 1 829 3 view .LVU209
 830:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
 831:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   tmpreg = RCC->CFGR;
 951              		.loc 1 831 3 view .LVU210
 952              		.loc 1 831 10 is_stmt 0 view .LVU211
 953 0000 034A     		ldr	r2, .L73
 954 0002 5368     		ldr	r3, [r2, #4]
 955              	.LVL41:
 832:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
 833:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Clear PPRE[2:0] bits */
 834:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE;
 956              		.loc 1 834 3 is_stmt 1 view .LVU212
 957              		.loc 1 834 10 is_stmt 0 view .LVU213
 958 0004 0349     		ldr	r1, .L73+4
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 32


 959 0006 0B40     		ands	r3, r1
 960              	.LVL42:
 835:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
 836:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Set PPRE[2:0] bits according to RCC_HCLK value */
 837:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   tmpreg |= RCC_HCLK;
 961              		.loc 1 837 3 is_stmt 1 view .LVU214
 962              		.loc 1 837 10 is_stmt 0 view .LVU215
 963 0008 0343     		orrs	r3, r0
 964              	.LVL43:
 838:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
 839:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Store the new value */
 840:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   RCC->CFGR = tmpreg;
 965              		.loc 1 840 3 is_stmt 1 view .LVU216
 966              		.loc 1 840 13 is_stmt 0 view .LVU217
 967 000a 5360     		str	r3, [r2, #4]
 841:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** }
 968              		.loc 1 841 1 view .LVU218
 969              		@ sp needed
 970 000c 7047     		bx	lr
 971              	.L74:
 972 000e C046     		.align	2
 973              	.L73:
 974 0010 00100240 		.word	1073876992
 975 0014 FFF8FFFF 		.word	-1793
 976              		.cfi_endproc
 977              	.LFE53:
 979              		.section	.text.RCC_ADCCLKConfig,"ax",%progbits
 980              		.align	1
 981              		.global	RCC_ADCCLKConfig
 982              		.syntax unified
 983              		.code	16
 984              		.thumb_func
 985              		.fpu softvfp
 987              	RCC_ADCCLKConfig:
 988              	.LVL44:
 989              	.LFB54:
 842:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 843:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
 844:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @brief  Configures the ADC clock (ADCCLK).
 845:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   This function is obsolete.
 846:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         For proper ADC clock selection, refer to ADC_ClockModeConfig() in the ADC driver
 847:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  RCC_ADCCLK: defines the ADC clock source. This clock is derived 
 848:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         from the HSI14 or APB clock (PCLK).
 849:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 850:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_ADCCLK_HSI14: ADC clock = HSI14 (14MHz)
 851:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_ADCCLK_PCLK_Div2: ADC clock = PCLK/2
 852:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_ADCCLK_PCLK_Div4: ADC clock = PCLK/4  
 853:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @retval None
 854:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
 855:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** void RCC_ADCCLKConfig(uint32_t RCC_ADCCLK)
 856:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** { 
 990              		.loc 1 856 1 is_stmt 1 view -0
 991              		.cfi_startproc
 992              		@ args = 0, pretend = 0, frame = 0
 993              		@ frame_needed = 0, uses_anonymous_args = 0
 994              		@ link register save eliminated.
 857:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Check the parameters */
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 33


 858:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_RCC_ADCCLK(RCC_ADCCLK));
 995              		.loc 1 858 3 view .LVU220
 859:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 860:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Clear ADCPRE bit */
 861:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   RCC->CFGR &= ~RCC_CFGR_ADCPRE;
 996              		.loc 1 861 3 view .LVU221
 997              		.loc 1 861 13 is_stmt 0 view .LVU222
 998 0000 094B     		ldr	r3, .L76
 999 0002 5A68     		ldr	r2, [r3, #4]
 1000 0004 0949     		ldr	r1, .L76+4
 1001 0006 0A40     		ands	r2, r1
 1002 0008 5A60     		str	r2, [r3, #4]
 862:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Set ADCPRE bits according to RCC_PCLK value */
 863:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   RCC->CFGR |= RCC_ADCCLK & 0xFFFF;
 1003              		.loc 1 863 3 is_stmt 1 view .LVU223
 1004              		.loc 1 863 13 is_stmt 0 view .LVU224
 1005 000a 5A68     		ldr	r2, [r3, #4]
 1006              		.loc 1 863 27 view .LVU225
 1007 000c 0104     		lsls	r1, r0, #16
 1008 000e 090C     		lsrs	r1, r1, #16
 1009              		.loc 1 863 13 view .LVU226
 1010 0010 0A43     		orrs	r2, r1
 1011 0012 5A60     		str	r2, [r3, #4]
 864:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 865:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Clear ADCSW bit */
 866:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   RCC->CFGR3 &= ~RCC_CFGR3_ADCSW; 
 1012              		.loc 1 866 3 is_stmt 1 view .LVU227
 1013              		.loc 1 866 14 is_stmt 0 view .LVU228
 1014 0014 1A6B     		ldr	r2, [r3, #48]
 1015 0016 0649     		ldr	r1, .L76+8
 1016 0018 0A40     		ands	r2, r1
 1017 001a 1A63     		str	r2, [r3, #48]
 867:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Set ADCSW bits according to RCC_ADCCLK value */
 868:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   RCC->CFGR3 |= RCC_ADCCLK >> 16;  
 1018              		.loc 1 868 3 is_stmt 1 view .LVU229
 1019              		.loc 1 868 14 is_stmt 0 view .LVU230
 1020 001c 1A6B     		ldr	r2, [r3, #48]
 1021              		.loc 1 868 28 view .LVU231
 1022 001e 000C     		lsrs	r0, r0, #16
 1023              	.LVL45:
 1024              		.loc 1 868 14 view .LVU232
 1025 0020 1043     		orrs	r0, r2
 1026 0022 1863     		str	r0, [r3, #48]
 869:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** }
 1027              		.loc 1 869 1 view .LVU233
 1028              		@ sp needed
 1029 0024 7047     		bx	lr
 1030              	.L77:
 1031 0026 C046     		.align	2
 1032              	.L76:
 1033 0028 00100240 		.word	1073876992
 1034 002c FFBFFFFF 		.word	-16385
 1035 0030 FFFEFFFF 		.word	-257
 1036              		.cfi_endproc
 1037              	.LFE54:
 1039              		.section	.text.RCC_CECCLKConfig,"ax",%progbits
 1040              		.align	1
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 34


 1041              		.global	RCC_CECCLKConfig
 1042              		.syntax unified
 1043              		.code	16
 1044              		.thumb_func
 1045              		.fpu softvfp
 1047              	RCC_CECCLKConfig:
 1048              	.LVL46:
 1049              	.LFB55:
 870:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 871:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
 872:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @brief  Configures the CEC clock (CECCLK).
 873:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  RCC_CECCLK: defines the CEC clock source. This clock is derived 
 874:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         from the HSI or LSE clock.
 875:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 876:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_CECCLK_HSI_Div244: CEC clock = HSI/244 (32768Hz)
 877:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_CECCLK_LSE: CEC clock = LSE
 878:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @retval None
 879:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
 880:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** void RCC_CECCLKConfig(uint32_t RCC_CECCLK)
 881:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** { 
 1050              		.loc 1 881 1 is_stmt 1 view -0
 1051              		.cfi_startproc
 1052              		@ args = 0, pretend = 0, frame = 0
 1053              		@ frame_needed = 0, uses_anonymous_args = 0
 1054              		@ link register save eliminated.
 882:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Check the parameters */
 883:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_RCC_CECCLK(RCC_CECCLK));
 1055              		.loc 1 883 3 view .LVU235
 884:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 885:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Clear CECSW bit */
 886:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   RCC->CFGR3 &= ~RCC_CFGR3_CECSW;
 1056              		.loc 1 886 3 view .LVU236
 1057              		.loc 1 886 14 is_stmt 0 view .LVU237
 1058 0000 044B     		ldr	r3, .L79
 1059 0002 196B     		ldr	r1, [r3, #48]
 1060 0004 4022     		movs	r2, #64
 1061 0006 9143     		bics	r1, r2
 1062 0008 1963     		str	r1, [r3, #48]
 887:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Set CECSW bits according to RCC_CECCLK value */
 888:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   RCC->CFGR3 |= RCC_CECCLK;
 1063              		.loc 1 888 3 is_stmt 1 view .LVU238
 1064              		.loc 1 888 14 is_stmt 0 view .LVU239
 1065 000a 1A6B     		ldr	r2, [r3, #48]
 1066 000c 0243     		orrs	r2, r0
 1067 000e 1A63     		str	r2, [r3, #48]
 889:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** }
 1068              		.loc 1 889 1 view .LVU240
 1069              		@ sp needed
 1070 0010 7047     		bx	lr
 1071              	.L80:
 1072 0012 C046     		.align	2
 1073              	.L79:
 1074 0014 00100240 		.word	1073876992
 1075              		.cfi_endproc
 1076              	.LFE55:
 1078              		.section	.text.RCC_I2CCLKConfig,"ax",%progbits
 1079              		.align	1
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 35


 1080              		.global	RCC_I2CCLKConfig
 1081              		.syntax unified
 1082              		.code	16
 1083              		.thumb_func
 1084              		.fpu softvfp
 1086              	RCC_I2CCLKConfig:
 1087              	.LVL47:
 1088              	.LFB56:
 890:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 891:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
 892:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @brief  Configures the I2C1 clock (I2C1CLK).
 893:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  RCC_I2CCLK: defines the I2C1 clock source. This clock is derived 
 894:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         from the HSI or System clock.
 895:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 896:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_I2C1CLK_HSI: I2C1 clock = HSI
 897:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_I2C1CLK_SYSCLK: I2C1 clock = System Clock
 898:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @retval None
 899:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
 900:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** void RCC_I2CCLKConfig(uint32_t RCC_I2CCLK)
 901:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** { 
 1089              		.loc 1 901 1 is_stmt 1 view -0
 1090              		.cfi_startproc
 1091              		@ args = 0, pretend = 0, frame = 0
 1092              		@ frame_needed = 0, uses_anonymous_args = 0
 1093              		@ link register save eliminated.
 902:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Check the parameters */
 903:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_RCC_I2CCLK(RCC_I2CCLK));
 1094              		.loc 1 903 3 view .LVU242
 904:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 905:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Clear I2CSW bit */
 906:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   RCC->CFGR3 &= ~RCC_CFGR3_I2C1SW;
 1095              		.loc 1 906 3 view .LVU243
 1096              		.loc 1 906 14 is_stmt 0 view .LVU244
 1097 0000 044B     		ldr	r3, .L82
 1098 0002 196B     		ldr	r1, [r3, #48]
 1099 0004 1022     		movs	r2, #16
 1100 0006 9143     		bics	r1, r2
 1101 0008 1963     		str	r1, [r3, #48]
 907:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Set I2CSW bits according to RCC_I2CCLK value */
 908:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   RCC->CFGR3 |= RCC_I2CCLK;
 1102              		.loc 1 908 3 is_stmt 1 view .LVU245
 1103              		.loc 1 908 14 is_stmt 0 view .LVU246
 1104 000a 1A6B     		ldr	r2, [r3, #48]
 1105 000c 0243     		orrs	r2, r0
 1106 000e 1A63     		str	r2, [r3, #48]
 909:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** }
 1107              		.loc 1 909 1 view .LVU247
 1108              		@ sp needed
 1109 0010 7047     		bx	lr
 1110              	.L83:
 1111 0012 C046     		.align	2
 1112              	.L82:
 1113 0014 00100240 		.word	1073876992
 1114              		.cfi_endproc
 1115              	.LFE56:
 1117              		.section	.text.RCC_USARTCLKConfig,"ax",%progbits
 1118              		.align	1
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 36


 1119              		.global	RCC_USARTCLKConfig
 1120              		.syntax unified
 1121              		.code	16
 1122              		.thumb_func
 1123              		.fpu softvfp
 1125              	RCC_USARTCLKConfig:
 1126              	.LVL48:
 1127              	.LFB57:
 910:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 911:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
 912:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @brief  Configures the USART1 clock (USART1CLK).
 913:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  RCC_USARTCLK: defines the USART clock source. This clock is derived 
 914:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         from the HSI or System clock.
 915:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 916:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_USART1CLK_PCLK: USART1 clock = APB Clock (PCLK)
 917:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_USART1CLK_SYSCLK: USART1 clock = System Clock
 918:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_USART1CLK_LSE: USART1 clock = LSE Clock
 919:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_USART1CLK_HSI: USART1 clock = HSI Clock
 920:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_USART2CLK_PCLK: USART2 clock = APB Clock (PCLK), applicable only for HK32F
 921:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_USART2CLK_SYSCLK: USART2 clock = System Clock, applicable only for HK32F07
 922:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_USART2CLK_LSE: USART2 clock = LSE Clock, applicable only for HK32F072 and 
 923:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_USART2CLK_HSI: USART2 clock = HSI Clock, applicable only for HK32F072 and 
 924:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_USART3CLK_PCLK: USART3 clock = APB Clock (PCLK), applicable only for HK32F
 925:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_USART3CLK_SYSCLK: USART3 clock = System Clock, applicable only for HK32F09
 926:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_USART3CLK_LSE: USART3 clock = LSE Clock, applicable only for HK32F091 devi
 927:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_USART3CLK_HSI: USART3 clock = HSI Clock, applicable only for HK32F091 devi
 928:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @retval None
 929:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
 930:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** void RCC_USARTCLKConfig(uint32_t RCC_USARTCLK)
 931:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** { 
 1128              		.loc 1 931 1 is_stmt 1 view -0
 1129              		.cfi_startproc
 1130              		@ args = 0, pretend = 0, frame = 0
 1131              		@ frame_needed = 0, uses_anonymous_args = 0
 1132              		@ link register save eliminated.
 932:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   uint32_t tmp = 0;
 1133              		.loc 1 932 3 view .LVU249
 933:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
 934:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Check the parameters */
 935:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_RCC_USARTCLK(RCC_USARTCLK));
 1134              		.loc 1 935 3 view .LVU250
 936:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 937:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Get USART index */
 938:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   tmp = (RCC_USARTCLK >> 28);
 1135              		.loc 1 938 3 view .LVU251
 1136              		.loc 1 938 7 is_stmt 0 view .LVU252
 1137 0000 030F     		lsrs	r3, r0, #28
 1138              	.LVL49:
 939:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 940:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Clear USARTSW[1:0] bit */
 941:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   if (tmp == (uint32_t)0x00000001)
 1139              		.loc 1 941 3 is_stmt 1 view .LVU253
 1140              		.loc 1 941 6 is_stmt 0 view .LVU254
 1141 0002 012B     		cmp	r3, #1
 1142 0004 0BD0     		beq	.L88
 942:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 943:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     /* Clear USART1SW[1:0] bit */  
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 37


 944:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC->CFGR3 &= ~RCC_CFGR3_USART1SW;
 945:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 946:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   else if (tmp == (uint32_t)0x00000002)
 1143              		.loc 1 946 8 is_stmt 1 view .LVU255
 1144              		.loc 1 946 11 is_stmt 0 view .LVU256
 1145 0006 022B     		cmp	r3, #2
 1146 0008 0FD0     		beq	.L89
 947:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 948:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     /* Clear USART2SW[1:0] bit */
 949:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC->CFGR3 &= ~RCC_CFGR3_USART2SW;
 950:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 951:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   else 
 952:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 953:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     /* Clear USART3SW[1:0] bit */
 954:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC->CFGR3 &= ~RCC_CFGR3_USART3SW;
 1147              		.loc 1 954 5 is_stmt 1 view .LVU257
 1148              		.loc 1 954 16 is_stmt 0 view .LVU258
 1149 000a 0B4A     		ldr	r2, .L90
 1150 000c 136B     		ldr	r3, [r2, #48]
 1151              	.LVL50:
 1152              		.loc 1 954 16 view .LVU259
 1153 000e 0B49     		ldr	r1, .L90+4
 1154 0010 0B40     		ands	r3, r1
 1155 0012 1363     		str	r3, [r2, #48]
 1156              	.L86:
 955:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 956:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 957:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Set USARTxSW bits according to RCC_USARTCLK value */
 958:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   RCC->CFGR3 |= RCC_USARTCLK;
 1157              		.loc 1 958 3 is_stmt 1 view .LVU260
 1158              		.loc 1 958 14 is_stmt 0 view .LVU261
 1159 0014 084A     		ldr	r2, .L90
 1160 0016 136B     		ldr	r3, [r2, #48]
 1161 0018 1843     		orrs	r0, r3
 1162              	.LVL51:
 1163              		.loc 1 958 14 view .LVU262
 1164 001a 1063     		str	r0, [r2, #48]
 959:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** }
 1165              		.loc 1 959 1 view .LVU263
 1166              		@ sp needed
 1167 001c 7047     		bx	lr
 1168              	.LVL52:
 1169              	.L88:
 944:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 1170              		.loc 1 944 5 is_stmt 1 view .LVU264
 944:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 1171              		.loc 1 944 16 is_stmt 0 view .LVU265
 1172 001e 064A     		ldr	r2, .L90
 1173 0020 136B     		ldr	r3, [r2, #48]
 1174              	.LVL53:
 944:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 1175              		.loc 1 944 16 view .LVU266
 1176 0022 0321     		movs	r1, #3
 1177 0024 8B43     		bics	r3, r1
 1178 0026 1363     		str	r3, [r2, #48]
 1179 0028 F4E7     		b	.L86
 1180              	.LVL54:
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 38


 1181              	.L89:
 949:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 1182              		.loc 1 949 5 is_stmt 1 view .LVU267
 949:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 1183              		.loc 1 949 16 is_stmt 0 view .LVU268
 1184 002a 034A     		ldr	r2, .L90
 1185 002c 136B     		ldr	r3, [r2, #48]
 1186              	.LVL55:
 949:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 1187              		.loc 1 949 16 view .LVU269
 1188 002e 0449     		ldr	r1, .L90+8
 1189 0030 0B40     		ands	r3, r1
 1190 0032 1363     		str	r3, [r2, #48]
 1191 0034 EEE7     		b	.L86
 1192              	.L91:
 1193 0036 C046     		.align	2
 1194              	.L90:
 1195 0038 00100240 		.word	1073876992
 1196 003c FFFFF3FF 		.word	-786433
 1197 0040 FFFFFCFF 		.word	-196609
 1198              		.cfi_endproc
 1199              	.LFE57:
 1201              		.section	.text.RCC_USBCLKConfig,"ax",%progbits
 1202              		.align	1
 1203              		.global	RCC_USBCLKConfig
 1204              		.syntax unified
 1205              		.code	16
 1206              		.thumb_func
 1207              		.fpu softvfp
 1209              	RCC_USBCLKConfig:
 1210              	.LVL56:
 1211              	.LFB58:
 960:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 961:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
 962:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @brief  Configures the USB clock (USBCLK).
 963:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         This function is only applicable for HK32F072 devices.  
 964:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  RCC_USBCLK: defines the USB clock source. This clock is derived 
 965:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         from the HSI48 or system clock.
 966:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 967:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_USBCLK_HSI48: USB clock = HSI48
 968:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_USBCLK_PLLCLK: USB clock = PLL clock
 969:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @retval None
 970:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
 971:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** void RCC_USBCLKConfig(uint32_t RCC_USBCLK)
 972:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** { 
 1212              		.loc 1 972 1 is_stmt 1 view -0
 1213              		.cfi_startproc
 1214              		@ args = 0, pretend = 0, frame = 0
 1215              		@ frame_needed = 0, uses_anonymous_args = 0
 1216              		@ link register save eliminated.
 973:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Check the parameters */
 974:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_RCC_USBCLK(RCC_USBCLK));
 1217              		.loc 1 974 3 view .LVU271
 975:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 976:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Clear USBSW bit */
 977:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   RCC->CFGR3 &= ~RCC_CFGR3_USBSW;
 1218              		.loc 1 977 3 view .LVU272
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 39


 1219              		.loc 1 977 14 is_stmt 0 view .LVU273
 1220 0000 044B     		ldr	r3, .L93
 1221 0002 196B     		ldr	r1, [r3, #48]
 1222 0004 8022     		movs	r2, #128
 1223 0006 9143     		bics	r1, r2
 1224 0008 1963     		str	r1, [r3, #48]
 978:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Set USBSW bits according to RCC_USBCLK value */
 979:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   RCC->CFGR3 |= RCC_USBCLK;
 1225              		.loc 1 979 3 is_stmt 1 view .LVU274
 1226              		.loc 1 979 14 is_stmt 0 view .LVU275
 1227 000a 1A6B     		ldr	r2, [r3, #48]
 1228 000c 0243     		orrs	r2, r0
 1229 000e 1A63     		str	r2, [r3, #48]
 980:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** }
 1230              		.loc 1 980 1 view .LVU276
 1231              		@ sp needed
 1232 0010 7047     		bx	lr
 1233              	.L94:
 1234 0012 C046     		.align	2
 1235              	.L93:
 1236 0014 00100240 		.word	1073876992
 1237              		.cfi_endproc
 1238              	.LFE58:
 1240              		.global	__aeabi_uidiv
 1241              		.section	.text.RCC_GetClocksFreq,"ax",%progbits
 1242              		.align	1
 1243              		.global	RCC_GetClocksFreq
 1244              		.syntax unified
 1245              		.code	16
 1246              		.thumb_func
 1247              		.fpu softvfp
 1249              	RCC_GetClocksFreq:
 1250              	.LVL57:
 1251              	.LFB59:
 981:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 982:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
 983:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @brief  Returns the frequencies of the System, AHB and APB busses clocks.
 984:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note    The frequency returned by this function is not the real frequency
 985:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *           in the chip. It is calculated based on the predefined constant and
 986:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *           the source selected by RCC_SYSCLKConfig():
 987:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *                                              
 988:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note     If SYSCLK source is HSI, function returns constant HSI_VALUE(*)
 989:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *                                              
 990:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note     If SYSCLK source is HSE, function returns constant HSE_VALUE(**)
 991:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *                          
 992:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note     If SYSCLK source is PLL, function returns constant HSE_VALUE(**) 
 993:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             or HSI_VALUE(*) multiplied by the PLL factors.
 994:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *               
 995:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note     If SYSCLK source is HSI48, function returns constant HSI48_VALUE(***) 
 996:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             
 997:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in HK32f0xx.h file (default value
 998:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *               8 MHz) but the real value may vary depending on the variations
 999:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *               in voltage and temperature, refer to RCC_AdjustHSICalibrationValue().   
1000:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *    
1001:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in HK32f0xx.h file (default value
1002:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *                8 MHz), user has to ensure that HSE_VALUE is same as the real
1003:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 40


1004:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *                return wrong result.
1005:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *
1006:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note     (***) HSI48_VALUE is a constant defined in HK32f0xx.h file (default value
1007:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *                 48 MHz) but the real value may vary depending on the variations
1008:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *                 in voltage and temperature.
1009:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *                                   
1010:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   The result of this function could be not correct when using fractional
1011:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         value for HSE crystal.   
1012:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             
1013:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold 
1014:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         the clocks frequencies. 
1015:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *     
1016:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   This function can be used by the user application to compute the 
1017:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         baudrate for the communication peripherals or configure other parameters.
1018:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   Each time SYSCLK, HCLK and/or PCLK clock changes, this function
1019:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         must be called to update the structure's field. Otherwise, any
1020:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         configuration based on this function will be incorrect.
1021:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *    
1022:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @retval None
1023:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
1024:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
1025:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** {
 1252              		.loc 1 1025 1 is_stmt 1 view -0
 1253              		.cfi_startproc
 1254              		@ args = 0, pretend = 0, frame = 0
 1255              		@ frame_needed = 0, uses_anonymous_args = 0
 1256              		.loc 1 1025 1 is_stmt 0 view .LVU278
 1257 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1258              	.LCFI1:
 1259              		.cfi_def_cfa_offset 24
 1260              		.cfi_offset 3, -24
 1261              		.cfi_offset 4, -20
 1262              		.cfi_offset 5, -16
 1263              		.cfi_offset 6, -12
 1264              		.cfi_offset 7, -8
 1265              		.cfi_offset 14, -4
 1266 0002 0400     		movs	r4, r0
1026:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 1267              		.loc 1 1026 3 is_stmt 1 view .LVU279
 1268              	.LVL58:
1027:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
1028:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
1029:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 1269              		.loc 1 1029 3 view .LVU280
 1270              		.loc 1 1029 12 is_stmt 0 view .LVU281
 1271 0004 774B     		ldr	r3, .L132
 1272 0006 5868     		ldr	r0, [r3, #4]
 1273              	.LVL59:
 1274              		.loc 1 1029 7 view .LVU282
 1275 0008 0C23     		movs	r3, #12
 1276 000a 1840     		ands	r0, r3
 1277              	.LVL60:
1030:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
1031:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   switch (tmp)
 1278              		.loc 1 1031 3 is_stmt 1 view .LVU283
 1279 000c 0828     		cmp	r0, #8
 1280 000e 53D0     		beq	.L96
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 41


 1281 0010 08D8     		bhi	.L97
 1282 0012 0028     		cmp	r0, #0
 1283 0014 0CD0     		beq	.L98
 1284 0016 0428     		cmp	r0, #4
 1285 0018 00D0     		beq	.LCB1007
 1286 001a 6BE0     		b	.L100	@long jump
 1287              	.LCB1007:
1032:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
1033:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     case 0x00:  /* HSI used as system clock */
1034:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
1035:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       break;
1036:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     case 0x04:  /* HSE used as system clock */
1037:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 1288              		.loc 1 1037 7 view .LVU284
 1289              		.loc 1 1037 36 is_stmt 0 view .LVU285
 1290 001c 724B     		ldr	r3, .L132+4
 1291 001e 2360     		str	r3, [r4]
1038:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       break;
 1292              		.loc 1 1038 7 is_stmt 1 view .LVU286
1026:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 1293              		.loc 1 1026 79 is_stmt 0 view .LVU287
 1294 0020 0020     		movs	r0, #0
 1295              	.LVL61:
 1296              		.loc 1 1038 7 view .LVU288
 1297 0022 07E0     		b	.L102
 1298              	.LVL62:
 1299              	.L97:
1031:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 1300              		.loc 1 1031 3 view .LVU289
 1301 0024 0C28     		cmp	r0, #12
 1302 0026 65D1     		bne	.L100
1039:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     case 0x08:  /* PLL used as system clock */
1040:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
1041:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
1042:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
1043:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       pllmull = ( pllmull >> 18) + 2;
1044:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       
1045:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       if (pllsource == 0x00)
1046:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       {
1047:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****         /* HSI oscillator clock divided by 2 selected as PLL clock entry */
1048:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****         pllclk = (HSI_VALUE >> 1) * pllmull;
1049:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       }
1050:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       else
1051:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       {
1052:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****         prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
1053:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****         /* HSE oscillator clock selected as PREDIV1 clock entry */
1054:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****         pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
1055:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       }
1056:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = pllclk;      
1057:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       break;
1058:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     case 0x0C:  /* HSI48 used as system clock */
1059:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI48_VALUE;
 1303              		.loc 1 1059 7 is_stmt 1 view .LVU290
 1304              		.loc 1 1059 36 is_stmt 0 view .LVU291
 1305 0028 704B     		ldr	r3, .L132+8
 1306 002a 2360     		str	r3, [r4]
1060:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       break;
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 42


 1307              		.loc 1 1060 7 is_stmt 1 view .LVU292
1026:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 1308              		.loc 1 1026 79 is_stmt 0 view .LVU293
 1309 002c 0020     		movs	r0, #0
 1310              	.LVL63:
 1311              		.loc 1 1060 7 view .LVU294
 1312 002e 01E0     		b	.L102
 1313              	.LVL64:
 1314              	.L98:
1034:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       break;
 1315              		.loc 1 1034 7 is_stmt 1 view .LVU295
1034:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       break;
 1316              		.loc 1 1034 36 is_stmt 0 view .LVU296
 1317 0030 6D4B     		ldr	r3, .L132+4
 1318 0032 2360     		str	r3, [r4]
1035:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     case 0x04:  /* HSE used as system clock */
 1319              		.loc 1 1035 7 is_stmt 1 view .LVU297
 1320              	.LVL65:
 1321              	.L102:
1061:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     default: /* HSI used as system clock */
1062:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
1063:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       break;
1064:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1065:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
1066:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Get HCLK prescaler */
1067:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_HPRE;
 1322              		.loc 1 1067 3 view .LVU298
 1323              		.loc 1 1067 12 is_stmt 0 view .LVU299
 1324 0034 6B4A     		ldr	r2, .L132
 1325 0036 5168     		ldr	r1, [r2, #4]
 1326              	.LVL66:
1068:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   tmp = tmp >> 4;
 1327              		.loc 1 1068 3 is_stmt 1 view .LVU300
 1328              		.loc 1 1068 7 is_stmt 0 view .LVU301
 1329 0038 0909     		lsrs	r1, r1, #4
 1330              	.LVL67:
 1331              		.loc 1 1068 7 view .LVU302
 1332 003a 0F23     		movs	r3, #15
 1333 003c 0B40     		ands	r3, r1
 1334              	.LVL68:
1069:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   presc = APBAHBPrescTable[tmp]; 
 1335              		.loc 1 1069 3 is_stmt 1 view .LVU303
 1336              		.loc 1 1069 27 is_stmt 0 view .LVU304
 1337 003e 6C4F     		ldr	r7, .L132+12
 1338 0040 FB5C     		ldrb	r3, [r7, r3]
 1339              	.LVL69:
 1340              		.loc 1 1069 27 view .LVU305
 1341 0042 DBB2     		uxtb	r3, r3
 1342              	.LVL70:
1070:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* HCLK clock frequency */
1071:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 1343              		.loc 1 1071 3 is_stmt 1 view .LVU306
 1344              		.loc 1 1071 42 is_stmt 0 view .LVU307
 1345 0044 2668     		ldr	r6, [r4]
 1346              		.loc 1 1071 61 view .LVU308
 1347 0046 3100     		movs	r1, r6
 1348              	.LVL71:
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 43


 1349              		.loc 1 1071 61 view .LVU309
 1350 0048 D940     		lsrs	r1, r1, r3
 1351 004a 0B00     		movs	r3, r1
 1352              	.LVL72:
 1353              		.loc 1 1071 30 view .LVU310
 1354 004c 6160     		str	r1, [r4, #4]
1072:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
1073:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Get PCLK prescaler */
1074:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE;
 1355              		.loc 1 1074 3 is_stmt 1 view .LVU311
 1356              		.loc 1 1074 12 is_stmt 0 view .LVU312
 1357 004e 5568     		ldr	r5, [r2, #4]
 1358              	.LVL73:
1075:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   tmp = tmp >> 8;
 1359              		.loc 1 1075 3 is_stmt 1 view .LVU313
 1360              		.loc 1 1075 7 is_stmt 0 view .LVU314
 1361 0050 2D0A     		lsrs	r5, r5, #8
 1362              	.LVL74:
 1363              		.loc 1 1075 7 view .LVU315
 1364 0052 0721     		movs	r1, #7
 1365 0054 2940     		ands	r1, r5
 1366              	.LVL75:
1076:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1367              		.loc 1 1076 3 is_stmt 1 view .LVU316
 1368              		.loc 1 1076 27 is_stmt 0 view .LVU317
 1369 0056 795C     		ldrb	r1, [r7, r1]
 1370              	.LVL76:
 1371              		.loc 1 1076 27 view .LVU318
 1372 0058 C9B2     		uxtb	r1, r1
 1373              	.LVL77:
1077:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* PCLK clock frequency */
1078:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   RCC_Clocks->PCLK_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 1374              		.loc 1 1078 3 is_stmt 1 view .LVU319
 1375              		.loc 1 1078 59 is_stmt 0 view .LVU320
 1376 005a CB40     		lsrs	r3, r3, r1
 1377              		.loc 1 1078 30 view .LVU321
 1378 005c A360     		str	r3, [r4, #8]
1079:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
1080:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* ADCCLK clock frequency */
1081:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   if((RCC->CFGR3 & RCC_CFGR3_ADCSW) != RCC_CFGR3_ADCSW)
 1379              		.loc 1 1081 3 is_stmt 1 view .LVU322
 1380              		.loc 1 1081 10 is_stmt 0 view .LVU323
 1381 005e 126B     		ldr	r2, [r2, #48]
 1382              		.loc 1 1081 5 view .LVU324
 1383 0060 D205     		lsls	r2, r2, #23
 1384 0062 4BD4     		bmi	.L105
1082:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
1083:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     /* ADC Clock is HSI14 Osc. */
1084:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC_Clocks->ADCCLK_Frequency = HSI14_VALUE;
 1385              		.loc 1 1084 5 is_stmt 1 view .LVU325
 1386              		.loc 1 1084 34 is_stmt 0 view .LVU326
 1387 0064 634A     		ldr	r2, .L132+16
 1388 0066 E260     		str	r2, [r4, #12]
 1389              	.L106:
1085:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1086:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   else
1087:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 44


1088:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     if((RCC->CFGR & RCC_CFGR_ADCPRE) != RCC_CFGR_ADCPRE)
1089:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     {
1090:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       /* ADC Clock is derived from PCLK/2 */
1091:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 1;
1092:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     }
1093:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     else
1094:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     {
1095:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       /* ADC Clock is derived from PCLK/4 */
1096:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 2;
1097:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     }
1098:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     
1099:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1100:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
1101:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* CECCLK clock frequency */
1102:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   if((RCC->CFGR3 & RCC_CFGR3_CECSW) != RCC_CFGR3_CECSW)
 1390              		.loc 1 1102 3 is_stmt 1 view .LVU327
 1391              		.loc 1 1102 10 is_stmt 0 view .LVU328
 1392 0068 5E4A     		ldr	r2, .L132
 1393 006a 126B     		ldr	r2, [r2, #48]
 1394              		.loc 1 1102 5 view .LVU329
 1395 006c 5206     		lsls	r2, r2, #25
 1396 006e 4FD4     		bmi	.L108
1103:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
1104:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     /* CEC Clock is HSI/244 */
1105:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC_Clocks->CECCLK_Frequency = HSI_VALUE / 244;
 1397              		.loc 1 1105 5 is_stmt 1 view .LVU330
 1398              		.loc 1 1105 34 is_stmt 0 view .LVU331
 1399 0070 614A     		ldr	r2, .L132+20
 1400 0072 2261     		str	r2, [r4, #16]
 1401              	.L109:
1106:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1107:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   else
1108:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
1109:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     /* CECC Clock is LSE Osc. */
1110:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC_Clocks->CECCLK_Frequency = LSE_VALUE;
1111:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1112:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
1113:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* I2C1CLK clock frequency */
1114:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 1402              		.loc 1 1114 3 is_stmt 1 view .LVU332
 1403              		.loc 1 1114 10 is_stmt 0 view .LVU333
 1404 0074 5B4A     		ldr	r2, .L132
 1405 0076 126B     		ldr	r2, [r2, #48]
 1406              		.loc 1 1114 5 view .LVU334
 1407 0078 D206     		lsls	r2, r2, #27
 1408 007a 4DD4     		bmi	.L110
1115:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
1116:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     /* I2C1 Clock is HSI Osc. */
1117:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 1409              		.loc 1 1117 5 is_stmt 1 view .LVU335
 1410              		.loc 1 1117 35 is_stmt 0 view .LVU336
 1411 007c 5A4A     		ldr	r2, .L132+4
 1412 007e 6261     		str	r2, [r4, #20]
 1413              	.L111:
1118:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1119:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   else
1120:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 45


1121:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     /* I2C1 Clock is System Clock */
1122:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
1123:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1124:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
1125:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* USART1CLK clock frequency */
1126:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 1414              		.loc 1 1126 3 is_stmt 1 view .LVU337
 1415              		.loc 1 1126 10 is_stmt 0 view .LVU338
 1416 0080 584A     		ldr	r2, .L132
 1417 0082 126B     		ldr	r2, [r2, #48]
 1418              		.loc 1 1126 5 view .LVU339
 1419 0084 9207     		lsls	r2, r2, #30
 1420 0086 49D1     		bne	.L112
1127:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
1128:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     /* USART1 Clock is PCLK */
1129:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 1421              		.loc 1 1129 5 is_stmt 1 view .LVU340
 1422              		.loc 1 1129 37 is_stmt 0 view .LVU341
 1423 0088 A361     		str	r3, [r4, #24]
 1424              	.LVL78:
 1425              	.L113:
1130:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1131:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
1132:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
1133:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     /* USART1 Clock is System Clock */
1134:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
1135:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1136:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
1137:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
1138:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     /* USART1 Clock is LSE Osc. */
1139:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
1140:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1141:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
1142:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
1143:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     /* USART1 Clock is HSI Osc. */
1144:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
1145:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1146:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
1147:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* USART2CLK clock frequency */
1148:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 1426              		.loc 1 1148 3 is_stmt 1 view .LVU342
 1427              		.loc 1 1148 10 is_stmt 0 view .LVU343
 1428 008a 564A     		ldr	r2, .L132
 1429 008c 116B     		ldr	r1, [r2, #48]
 1430              		.loc 1 1148 18 view .LVU344
 1431 008e C022     		movs	r2, #192
 1432 0090 9202     		lsls	r2, r2, #10
 1433              		.loc 1 1148 5 view .LVU345
 1434 0092 1142     		tst	r1, r2
 1435 0094 5DD1     		bne	.L116
1149:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
1150:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     /* USART Clock is PCLK */
1151:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 1436              		.loc 1 1151 5 is_stmt 1 view .LVU346
 1437              		.loc 1 1151 37 is_stmt 0 view .LVU347
 1438 0096 E361     		str	r3, [r4, #28]
 1439              	.L117:
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 46


1152:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1153:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
1154:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
1155:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     /* USART Clock is System Clock */
1156:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
1157:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1158:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
1159:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
1160:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     /* USART Clock is LSE Osc. */
1161:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
1162:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1163:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
1164:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
1165:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     /* USART Clock is HSI Osc. */
1166:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
1167:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1168:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
1169:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* USART3CLK clock frequency */
1170:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 1440              		.loc 1 1170 3 is_stmt 1 view .LVU348
 1441              		.loc 1 1170 10 is_stmt 0 view .LVU349
 1442 0098 524A     		ldr	r2, .L132
 1443 009a 116B     		ldr	r1, [r2, #48]
 1444              		.loc 1 1170 18 view .LVU350
 1445 009c C022     		movs	r2, #192
 1446 009e 1203     		lsls	r2, r2, #12
 1447              		.loc 1 1170 5 view .LVU351
 1448 00a0 1142     		tst	r1, r2
 1449 00a2 00D0     		beq	.LCB1157
 1450 00a4 78E0     		b	.L120	@long jump
 1451              	.LCB1157:
1171:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
1172:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     /* USART Clock is PCLK */
1173:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 1452              		.loc 1 1173 5 is_stmt 1 view .LVU352
 1453              		.loc 1 1173 37 is_stmt 0 view .LVU353
 1454 00a6 2362     		str	r3, [r4, #32]
 1455              	.L121:
1174:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1175:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
1176:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
1177:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     /* USART Clock is System Clock */
1178:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
1179:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1180:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
1181:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
1182:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     /* USART Clock is LSE Osc. */
1183:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
1184:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1185:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
1186:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
1187:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     /* USART Clock is HSI Osc. */
1188:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
1189:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1190:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
1191:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* USBCLK clock frequency */
1192:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   if((RCC->CFGR3 & RCC_CFGR3_USBSW) != RCC_CFGR3_USBSW)
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 47


 1456              		.loc 1 1192 3 is_stmt 1 view .LVU354
 1457              		.loc 1 1192 10 is_stmt 0 view .LVU355
 1458 00a8 4E4B     		ldr	r3, .L132
 1459 00aa 1B6B     		ldr	r3, [r3, #48]
 1460              		.loc 1 1192 5 view .LVU356
 1461 00ac 1B06     		lsls	r3, r3, #24
 1462 00ae 00D5     		bpl	.LCB1169
 1463 00b0 95E0     		b	.L124	@long jump
 1464              	.LCB1169:
1193:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
1194:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     /* USB Clock is HSI48 */
1195:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC_Clocks->USBCLK_Frequency = HSI48_VALUE;
 1465              		.loc 1 1195 5 is_stmt 1 view .LVU357
 1466              		.loc 1 1195 34 is_stmt 0 view .LVU358
 1467 00b2 4E4B     		ldr	r3, .L132+8
 1468 00b4 6362     		str	r3, [r4, #36]
 1469              	.L95:
1196:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1197:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   else
1198:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
1199:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     /* USB Clock is PLL clock */
1200:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC_Clocks->USBCLK_Frequency = pllclk;
1201:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }   
1202:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** }
 1470              		.loc 1 1202 1 view .LVU359
 1471              		@ sp needed
 1472              	.LVL79:
 1473              	.LVL80:
 1474              		.loc 1 1202 1 view .LVU360
 1475 00b6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1476              	.LVL81:
 1477              	.L96:
1041:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 1478              		.loc 1 1041 7 is_stmt 1 view .LVU361
1041:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 1479              		.loc 1 1041 20 is_stmt 0 view .LVU362
 1480 00b8 4A4B     		ldr	r3, .L132
 1481 00ba 5D68     		ldr	r5, [r3, #4]
 1482              	.LVL82:
1042:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       pllmull = ( pllmull >> 18) + 2;
 1483              		.loc 1 1042 7 is_stmt 1 view .LVU363
1042:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       pllmull = ( pllmull >> 18) + 2;
 1484              		.loc 1 1042 22 is_stmt 0 view .LVU364
 1485 00bc 5A68     		ldr	r2, [r3, #4]
1042:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       pllmull = ( pllmull >> 18) + 2;
 1486              		.loc 1 1042 17 view .LVU365
 1487 00be C023     		movs	r3, #192
 1488 00c0 5B02     		lsls	r3, r3, #9
 1489              	.LVL83:
1043:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       
 1490              		.loc 1 1043 7 is_stmt 1 view .LVU366
1043:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       
 1491              		.loc 1 1043 27 is_stmt 0 view .LVU367
 1492 00c2 AD0C     		lsrs	r5, r5, #18
 1493              	.LVL84:
1043:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       
 1494              		.loc 1 1043 27 view .LVU368
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 48


 1495 00c4 0F20     		movs	r0, #15
 1496              	.LVL85:
1043:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       
 1497              		.loc 1 1043 27 view .LVU369
 1498 00c6 0540     		ands	r5, r0
1043:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       
 1499              		.loc 1 1043 15 view .LVU370
 1500 00c8 0235     		adds	r5, r5, #2
 1501              	.LVL86:
1045:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       {
 1502              		.loc 1 1045 7 is_stmt 1 view .LVU371
1045:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       {
 1503              		.loc 1 1045 10 is_stmt 0 view .LVU372
 1504 00ca 1A42     		tst	r2, r3
 1505 00cc 08D1     		bne	.L103
1048:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       }
 1506              		.loc 1 1048 9 is_stmt 1 view .LVU373
1048:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       }
 1507              		.loc 1 1048 16 is_stmt 0 view .LVU374
 1508 00ce 6B01     		lsls	r3, r5, #5
 1509              	.LVL87:
1048:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       }
 1510              		.loc 1 1048 16 view .LVU375
 1511 00d0 5B1B     		subs	r3, r3, r5
 1512 00d2 9801     		lsls	r0, r3, #6
 1513 00d4 C01A     		subs	r0, r0, r3
 1514 00d6 C000     		lsls	r0, r0, #3
 1515 00d8 4019     		adds	r0, r0, r5
 1516 00da 0002     		lsls	r0, r0, #8
 1517              	.LVL88:
 1518              	.L104:
1056:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       break;
 1519              		.loc 1 1056 7 is_stmt 1 view .LVU376
1056:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       break;
 1520              		.loc 1 1056 36 is_stmt 0 view .LVU377
 1521 00dc 2060     		str	r0, [r4]
1057:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     case 0x0C:  /* HSI48 used as system clock */
 1522              		.loc 1 1057 7 is_stmt 1 view .LVU378
 1523 00de A9E7     		b	.L102
 1524              	.LVL89:
 1525              	.L103:
1052:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****         /* HSE oscillator clock selected as PREDIV1 clock entry */
 1526              		.loc 1 1052 9 view .LVU379
1052:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****         /* HSE oscillator clock selected as PREDIV1 clock entry */
 1527              		.loc 1 1052 29 is_stmt 0 view .LVU380
 1528 00e0 404B     		ldr	r3, .L132
 1529              	.LVL90:
1052:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****         /* HSE oscillator clock selected as PREDIV1 clock entry */
 1530              		.loc 1 1052 29 view .LVU381
 1531 00e2 DB6A     		ldr	r3, [r3, #44]
1052:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****         /* HSE oscillator clock selected as PREDIV1 clock entry */
 1532              		.loc 1 1052 37 view .LVU382
 1533 00e4 0F21     		movs	r1, #15
 1534 00e6 1940     		ands	r1, r3
1052:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****         /* HSE oscillator clock selected as PREDIV1 clock entry */
 1535              		.loc 1 1052 23 view .LVU383
 1536 00e8 0131     		adds	r1, r1, #1
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 49


 1537              	.LVL91:
1054:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       }
 1538              		.loc 1 1054 9 is_stmt 1 view .LVU384
1054:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       }
 1539              		.loc 1 1054 29 is_stmt 0 view .LVU385
 1540 00ea 3F48     		ldr	r0, .L132+4
 1541 00ec FFF7FEFF 		bl	__aeabi_uidiv
 1542              	.LVL92:
1054:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       }
 1543              		.loc 1 1054 16 view .LVU386
 1544 00f0 6843     		muls	r0, r5
 1545              	.LVL93:
1054:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       }
 1546              		.loc 1 1054 16 view .LVU387
 1547 00f2 F3E7     		b	.L104
 1548              	.LVL94:
 1549              	.L100:
1062:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       break;
 1550              		.loc 1 1062 7 is_stmt 1 view .LVU388
1062:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****       break;
 1551              		.loc 1 1062 36 is_stmt 0 view .LVU389
 1552 00f4 3C4B     		ldr	r3, .L132+4
 1553 00f6 2360     		str	r3, [r4]
1063:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 1554              		.loc 1 1063 7 is_stmt 1 view .LVU390
1026:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 1555              		.loc 1 1026 79 is_stmt 0 view .LVU391
 1556 00f8 0020     		movs	r0, #0
 1557              	.LVL95:
1063:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 1558              		.loc 1 1063 7 view .LVU392
 1559 00fa 9BE7     		b	.L102
 1560              	.LVL96:
 1561              	.L105:
1088:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     {
 1562              		.loc 1 1088 5 is_stmt 1 view .LVU393
1088:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     {
 1563              		.loc 1 1088 12 is_stmt 0 view .LVU394
 1564 00fc 394A     		ldr	r2, .L132
 1565 00fe 5268     		ldr	r2, [r2, #4]
1088:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     {
 1566              		.loc 1 1088 7 view .LVU395
 1567 0100 5204     		lsls	r2, r2, #17
 1568 0102 02D4     		bmi	.L107
1091:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     }
 1569              		.loc 1 1091 7 is_stmt 1 view .LVU396
1091:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     }
 1570              		.loc 1 1091 65 is_stmt 0 view .LVU397
 1571 0104 5A08     		lsrs	r2, r3, #1
1091:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     }
 1572              		.loc 1 1091 36 view .LVU398
 1573 0106 E260     		str	r2, [r4, #12]
 1574 0108 AEE7     		b	.L106
 1575              	.L107:
1096:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     }
 1576              		.loc 1 1096 7 is_stmt 1 view .LVU399
1096:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     }
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 50


 1577              		.loc 1 1096 65 is_stmt 0 view .LVU400
 1578 010a 9A08     		lsrs	r2, r3, #2
1096:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     }
 1579              		.loc 1 1096 36 view .LVU401
 1580 010c E260     		str	r2, [r4, #12]
 1581 010e ABE7     		b	.L106
 1582              	.L108:
1110:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 1583              		.loc 1 1110 5 is_stmt 1 view .LVU402
1110:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 1584              		.loc 1 1110 34 is_stmt 0 view .LVU403
 1585 0110 8022     		movs	r2, #128
 1586 0112 1202     		lsls	r2, r2, #8
 1587 0114 2261     		str	r2, [r4, #16]
 1588 0116 ADE7     		b	.L109
 1589              	.L110:
1122:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 1590              		.loc 1 1122 5 is_stmt 1 view .LVU404
1122:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 1591              		.loc 1 1122 35 is_stmt 0 view .LVU405
 1592 0118 6661     		str	r6, [r4, #20]
 1593 011a B1E7     		b	.L111
 1594              	.L112:
1131:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 1595              		.loc 1 1131 8 is_stmt 1 view .LVU406
1131:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 1596              		.loc 1 1131 15 is_stmt 0 view .LVU407
 1597 011c 314A     		ldr	r2, .L132
 1598 011e 116B     		ldr	r1, [r2, #48]
 1599              	.LVL97:
1131:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 1600              		.loc 1 1131 23 view .LVU408
 1601 0120 0322     		movs	r2, #3
 1602 0122 0A40     		ands	r2, r1
1131:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 1603              		.loc 1 1131 10 view .LVU409
 1604 0124 012A     		cmp	r2, #1
 1605 0126 0ED0     		beq	.L126
1136:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 1606              		.loc 1 1136 8 is_stmt 1 view .LVU410
1136:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 1607              		.loc 1 1136 15 is_stmt 0 view .LVU411
 1608 0128 2E4A     		ldr	r2, .L132
 1609 012a 116B     		ldr	r1, [r2, #48]
1136:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 1610              		.loc 1 1136 23 view .LVU412
 1611 012c 0322     		movs	r2, #3
 1612 012e 0A40     		ands	r2, r1
1136:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 1613              		.loc 1 1136 10 view .LVU413
 1614 0130 022A     		cmp	r2, #2
 1615 0132 0AD0     		beq	.L127
1141:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 1616              		.loc 1 1141 8 is_stmt 1 view .LVU414
1141:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 1617              		.loc 1 1141 15 is_stmt 0 view .LVU415
 1618 0134 2B4A     		ldr	r2, .L132
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 51


 1619 0136 116B     		ldr	r1, [r2, #48]
1141:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 1620              		.loc 1 1141 23 view .LVU416
 1621 0138 0322     		movs	r2, #3
 1622 013a 0A40     		ands	r2, r1
1141:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 1623              		.loc 1 1141 10 view .LVU417
 1624 013c 032A     		cmp	r2, #3
 1625 013e A4D1     		bne	.L113
1144:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 1626              		.loc 1 1144 5 is_stmt 1 view .LVU418
1144:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 1627              		.loc 1 1144 37 is_stmt 0 view .LVU419
 1628 0140 294A     		ldr	r2, .L132+4
 1629 0142 A261     		str	r2, [r4, #24]
 1630 0144 A1E7     		b	.L113
 1631              	.L126:
1134:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 1632              		.loc 1 1134 5 is_stmt 1 view .LVU420
1134:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 1633              		.loc 1 1134 37 is_stmt 0 view .LVU421
 1634 0146 A661     		str	r6, [r4, #24]
 1635 0148 9FE7     		b	.L113
 1636              	.L127:
1139:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 1637              		.loc 1 1139 5 is_stmt 1 view .LVU422
1139:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 1638              		.loc 1 1139 37 is_stmt 0 view .LVU423
 1639 014a 8022     		movs	r2, #128
 1640 014c 1202     		lsls	r2, r2, #8
 1641 014e A261     		str	r2, [r4, #24]
 1642 0150 9BE7     		b	.L113
 1643              	.L116:
1153:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 1644              		.loc 1 1153 8 is_stmt 1 view .LVU424
1153:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 1645              		.loc 1 1153 15 is_stmt 0 view .LVU425
 1646 0152 244A     		ldr	r2, .L132
 1647 0154 126B     		ldr	r2, [r2, #48]
1153:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 1648              		.loc 1 1153 23 view .LVU426
 1649 0156 C021     		movs	r1, #192
 1650 0158 8902     		lsls	r1, r1, #10
 1651 015a 0A40     		ands	r2, r1
1153:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 1652              		.loc 1 1153 10 view .LVU427
 1653 015c 8021     		movs	r1, #128
 1654 015e 4902     		lsls	r1, r1, #9
 1655 0160 8A42     		cmp	r2, r1
 1656 0162 13D0     		beq	.L128
1158:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 1657              		.loc 1 1158 8 is_stmt 1 view .LVU428
1158:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 1658              		.loc 1 1158 15 is_stmt 0 view .LVU429
 1659 0164 1F4A     		ldr	r2, .L132
 1660 0166 126B     		ldr	r2, [r2, #48]
1158:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 52


 1661              		.loc 1 1158 23 view .LVU430
 1662 0168 C021     		movs	r1, #192
 1663 016a 8902     		lsls	r1, r1, #10
 1664 016c 0A40     		ands	r2, r1
1158:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 1665              		.loc 1 1158 10 view .LVU431
 1666 016e 8021     		movs	r1, #128
 1667 0170 8902     		lsls	r1, r1, #10
 1668 0172 8A42     		cmp	r2, r1
 1669 0174 0CD0     		beq	.L129
1163:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 1670              		.loc 1 1163 8 is_stmt 1 view .LVU432
1163:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 1671              		.loc 1 1163 15 is_stmt 0 view .LVU433
 1672 0176 1B4A     		ldr	r2, .L132
 1673 0178 126B     		ldr	r2, [r2, #48]
1163:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 1674              		.loc 1 1163 23 view .LVU434
 1675 017a C021     		movs	r1, #192
 1676 017c 8902     		lsls	r1, r1, #10
 1677 017e 0A40     		ands	r2, r1
1163:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 1678              		.loc 1 1163 10 view .LVU435
 1679 0180 8A42     		cmp	r2, r1
 1680 0182 00D0     		beq	.LCB1398
 1681 0184 88E7     		b	.L117	@long jump
 1682              	.LCB1398:
1166:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 1683              		.loc 1 1166 5 is_stmt 1 view .LVU436
1166:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 1684              		.loc 1 1166 37 is_stmt 0 view .LVU437
 1685 0186 184A     		ldr	r2, .L132+4
 1686 0188 E261     		str	r2, [r4, #28]
 1687 018a 85E7     		b	.L117
 1688              	.L128:
1156:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 1689              		.loc 1 1156 5 is_stmt 1 view .LVU438
1156:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 1690              		.loc 1 1156 37 is_stmt 0 view .LVU439
 1691 018c E661     		str	r6, [r4, #28]
 1692 018e 83E7     		b	.L117
 1693              	.L129:
1161:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 1694              		.loc 1 1161 5 is_stmt 1 view .LVU440
1161:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 1695              		.loc 1 1161 37 is_stmt 0 view .LVU441
 1696 0190 8022     		movs	r2, #128
 1697 0192 1202     		lsls	r2, r2, #8
 1698 0194 E261     		str	r2, [r4, #28]
 1699 0196 7FE7     		b	.L117
 1700              	.L120:
1175:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 1701              		.loc 1 1175 8 is_stmt 1 view .LVU442
1175:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 1702              		.loc 1 1175 15 is_stmt 0 view .LVU443
 1703 0198 124B     		ldr	r3, .L132
 1704 019a 1B6B     		ldr	r3, [r3, #48]
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 53


1175:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 1705              		.loc 1 1175 23 view .LVU444
 1706 019c C022     		movs	r2, #192
 1707 019e 1203     		lsls	r2, r2, #12
 1708 01a0 1340     		ands	r3, r2
1175:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 1709              		.loc 1 1175 10 view .LVU445
 1710 01a2 8022     		movs	r2, #128
 1711 01a4 D202     		lsls	r2, r2, #11
 1712 01a6 9342     		cmp	r3, r2
 1713 01a8 13D0     		beq	.L130
1180:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 1714              		.loc 1 1180 8 is_stmt 1 view .LVU446
1180:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 1715              		.loc 1 1180 15 is_stmt 0 view .LVU447
 1716 01aa 0E4B     		ldr	r3, .L132
 1717 01ac 1B6B     		ldr	r3, [r3, #48]
1180:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 1718              		.loc 1 1180 23 view .LVU448
 1719 01ae C022     		movs	r2, #192
 1720 01b0 1203     		lsls	r2, r2, #12
 1721 01b2 1340     		ands	r3, r2
1180:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 1722              		.loc 1 1180 10 view .LVU449
 1723 01b4 8022     		movs	r2, #128
 1724 01b6 1203     		lsls	r2, r2, #12
 1725 01b8 9342     		cmp	r3, r2
 1726 01ba 0CD0     		beq	.L131
1185:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 1727              		.loc 1 1185 8 is_stmt 1 view .LVU450
1185:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 1728              		.loc 1 1185 15 is_stmt 0 view .LVU451
 1729 01bc 094B     		ldr	r3, .L132
 1730 01be 1B6B     		ldr	r3, [r3, #48]
1185:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 1731              		.loc 1 1185 23 view .LVU452
 1732 01c0 C022     		movs	r2, #192
 1733 01c2 1203     		lsls	r2, r2, #12
 1734 01c4 1340     		ands	r3, r2
1185:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 1735              		.loc 1 1185 10 view .LVU453
 1736 01c6 9342     		cmp	r3, r2
 1737 01c8 00D0     		beq	.LCB1450
 1738 01ca 6DE7     		b	.L121	@long jump
 1739              	.LCB1450:
1188:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 1740              		.loc 1 1188 5 is_stmt 1 view .LVU454
1188:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 1741              		.loc 1 1188 37 is_stmt 0 view .LVU455
 1742 01cc 064B     		ldr	r3, .L132+4
 1743 01ce 2362     		str	r3, [r4, #32]
 1744 01d0 6AE7     		b	.L121
 1745              	.L130:
1178:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 1746              		.loc 1 1178 5 is_stmt 1 view .LVU456
1178:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 1747              		.loc 1 1178 37 is_stmt 0 view .LVU457
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 54


 1748 01d2 2662     		str	r6, [r4, #32]
 1749 01d4 68E7     		b	.L121
 1750              	.L131:
1183:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 1751              		.loc 1 1183 5 is_stmt 1 view .LVU458
1183:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 1752              		.loc 1 1183 37 is_stmt 0 view .LVU459
 1753 01d6 8023     		movs	r3, #128
 1754 01d8 1B02     		lsls	r3, r3, #8
 1755 01da 2362     		str	r3, [r4, #32]
 1756 01dc 64E7     		b	.L121
 1757              	.L124:
1200:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }   
 1758              		.loc 1 1200 5 is_stmt 1 view .LVU460
1200:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }   
 1759              		.loc 1 1200 34 is_stmt 0 view .LVU461
 1760 01de 6062     		str	r0, [r4, #36]
 1761              		.loc 1 1202 1 view .LVU462
 1762 01e0 69E7     		b	.L95
 1763              	.L133:
 1764 01e2 C046     		.align	2
 1765              	.L132:
 1766 01e4 00100240 		.word	1073876992
 1767 01e8 00127A00 		.word	8000000
 1768 01ec 006CDC02 		.word	48000000
 1769 01f0 00000000 		.word	.LANCHOR0
 1770 01f4 809FD500 		.word	14000000
 1771 01f8 12800000 		.word	32786
 1772              		.cfi_endproc
 1773              	.LFE59:
 1775              		.section	.text.RCC_RTCCLKConfig,"ax",%progbits
 1776              		.align	1
 1777              		.global	RCC_RTCCLKConfig
 1778              		.syntax unified
 1779              		.code	16
 1780              		.thumb_func
 1781              		.fpu softvfp
 1783              	RCC_RTCCLKConfig:
 1784              	.LVL98:
 1785              	.LFB60:
1203:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
1204:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
1205:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @}
1206:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
1207:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
1208:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /** @defgroup RCC_Group3 Peripheral clocks configuration functions
1209:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****  *  @brief   Peripheral clocks configuration functions 
1210:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****  *
1211:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** @verbatim
1212:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****  ===============================================================================
1213:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****              #####Peripheral clocks configuration functions #####
1214:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****  ===============================================================================  
1215:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
1216:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     [..] This section provide functions allowing to configure the Peripheral clocks. 
1217:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****          (#) The RTC clock which is derived from the LSE, LSI or  HSE_Div32 (HSE
1218:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****              divided by 32).
1219:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****          (#) After restart from Reset or wakeup from STANDBY, all peripherals are off
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 55


1220:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****              except internal SRAM, Flash and SWD. Before to start using a peripheral you
1221:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****              have to enable its interface clock. You can do this using RCC_AHBPeriphClockCmd(),
1222:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****              RCC_APB2PeriphClockCmd() and RCC_APB1PeriphClockCmd() functions.
1223:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****          (#) To reset the peripherals configuration (to the default state after device reset)
1224:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****              you can use RCC_AHBPeriphResetCmd(), RCC_APB2PeriphResetCmd() and 
1225:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****              RCC_APB1PeriphResetCmd() functions.
1226:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
1227:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** @endverbatim
1228:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @{
1229:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
1230:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
1231:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
1232:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @brief  Configures the RTC clock (RTCCLK).
1233:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   As the RTC clock configuration bits are in the Backup domain and write
1234:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         access is denied to this domain after reset, you have to enable write
1235:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         access using PWR_BackupAccessCmd(ENABLE) function before to configure
1236:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         the RTC clock source (to be done once after reset).    
1237:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   Once the RTC clock is configured it can't be changed unless the RTC
1238:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         is reset using RCC_BackupResetCmd function, or by a Power On Reset (POR)
1239:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             
1240:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  RCC_RTCCLKSource: specifies the RTC clock source.
1241:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter can be one of the following values:
1242:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSE: LSE selected as RTC clock
1243:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
1244:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *            @arg RCC_RTCCLKSource_HSE_Div32: HSE divided by 32 selected as RTC clock
1245:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *       
1246:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   If the LSE or LSI is used as RTC clock source, the RTC continues to
1247:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         work in STOP and STANDBY modes, and can be used as wakeup source.
1248:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         However, when the HSE clock is used as RTC clock source, the RTC
1249:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         cannot be used in STOP and STANDBY modes.
1250:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             
1251:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   The maximum input clock frequency for RTC is 2MHz (when using HSE as
1252:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         RTC clock source).
1253:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *                          
1254:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @retval None
1255:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
1256:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
1257:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** {
 1786              		.loc 1 1257 1 is_stmt 1 view -0
 1787              		.cfi_startproc
 1788              		@ args = 0, pretend = 0, frame = 0
 1789              		@ frame_needed = 0, uses_anonymous_args = 0
 1790              		@ link register save eliminated.
1258:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Check the parameters */
1259:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
 1791              		.loc 1 1259 3 view .LVU464
1260:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
1261:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Select the RTC clock source */
1262:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   RCC->BDCR |= RCC_RTCCLKSource;
 1792              		.loc 1 1262 3 view .LVU465
 1793              		.loc 1 1262 13 is_stmt 0 view .LVU466
 1794 0000 024A     		ldr	r2, .L135
 1795 0002 136A     		ldr	r3, [r2, #32]
 1796 0004 0343     		orrs	r3, r0
 1797 0006 1362     		str	r3, [r2, #32]
1263:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** }
 1798              		.loc 1 1263 1 view .LVU467
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 56


 1799              		@ sp needed
 1800 0008 7047     		bx	lr
 1801              	.L136:
 1802 000a C046     		.align	2
 1803              	.L135:
 1804 000c 00100240 		.word	1073876992
 1805              		.cfi_endproc
 1806              	.LFE60:
 1808              		.section	.text.RCC_RTCCLKCmd,"ax",%progbits
 1809              		.align	1
 1810              		.global	RCC_RTCCLKCmd
 1811              		.syntax unified
 1812              		.code	16
 1813              		.thumb_func
 1814              		.fpu softvfp
 1816              	RCC_RTCCLKCmd:
 1817              	.LVL99:
 1818              	.LFB61:
1264:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
1265:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
1266:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @brief  Enables or disables the RTC clock.
1267:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   This function must be used only after the RTC clock source was selected
1268:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         using the RCC_RTCCLKConfig function.
1269:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  NewState: new state of the RTC clock.
1270:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1271:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @retval None
1272:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
1273:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** void RCC_RTCCLKCmd(FunctionalState NewState)
1274:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** {
 1819              		.loc 1 1274 1 is_stmt 1 view -0
 1820              		.cfi_startproc
 1821              		@ args = 0, pretend = 0, frame = 0
 1822              		@ frame_needed = 0, uses_anonymous_args = 0
 1823              		@ link register save eliminated.
1275:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Check the parameters */
1276:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1824              		.loc 1 1276 3 view .LVU469
1277:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
1278:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   if (NewState != DISABLE)
 1825              		.loc 1 1278 3 view .LVU470
 1826              		.loc 1 1278 6 is_stmt 0 view .LVU471
 1827 0000 0028     		cmp	r0, #0
 1828 0002 06D0     		beq	.L138
1279:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
1280:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC->BDCR |= RCC_BDCR_RTCEN;
 1829              		.loc 1 1280 5 is_stmt 1 view .LVU472
 1830              		.loc 1 1280 15 is_stmt 0 view .LVU473
 1831 0004 064A     		ldr	r2, .L140
 1832 0006 116A     		ldr	r1, [r2, #32]
 1833 0008 8023     		movs	r3, #128
 1834 000a 1B02     		lsls	r3, r3, #8
 1835 000c 0B43     		orrs	r3, r1
 1836 000e 1362     		str	r3, [r2, #32]
 1837              	.L137:
1281:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1282:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   else
1283:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 57


1284:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC->BDCR &= ~RCC_BDCR_RTCEN;
1285:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1286:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** }
 1838              		.loc 1 1286 1 view .LVU474
 1839              		@ sp needed
 1840 0010 7047     		bx	lr
 1841              	.L138:
1284:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 1842              		.loc 1 1284 5 is_stmt 1 view .LVU475
1284:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 1843              		.loc 1 1284 15 is_stmt 0 view .LVU476
 1844 0012 034A     		ldr	r2, .L140
 1845 0014 136A     		ldr	r3, [r2, #32]
 1846 0016 0349     		ldr	r1, .L140+4
 1847 0018 0B40     		ands	r3, r1
 1848 001a 1362     		str	r3, [r2, #32]
 1849              		.loc 1 1286 1 view .LVU477
 1850 001c F8E7     		b	.L137
 1851              	.L141:
 1852 001e C046     		.align	2
 1853              	.L140:
 1854 0020 00100240 		.word	1073876992
 1855 0024 FF7FFFFF 		.word	-32769
 1856              		.cfi_endproc
 1857              	.LFE61:
 1859              		.section	.text.RCC_BackupResetCmd,"ax",%progbits
 1860              		.align	1
 1861              		.global	RCC_BackupResetCmd
 1862              		.syntax unified
 1863              		.code	16
 1864              		.thumb_func
 1865              		.fpu softvfp
 1867              	RCC_BackupResetCmd:
 1868              	.LVL100:
 1869              	.LFB62:
1287:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
1288:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
1289:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @brief  Forces or releases the Backup domain reset.
1290:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   This function resets the RTC peripheral (including the backup registers)
1291:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         and the RTC clock source selection in RCC_BDCR register.
1292:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  NewState: new state of the Backup domain reset.
1293:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1294:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @retval None
1295:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
1296:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** void RCC_BackupResetCmd(FunctionalState NewState)
1297:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** {
 1870              		.loc 1 1297 1 is_stmt 1 view -0
 1871              		.cfi_startproc
 1872              		@ args = 0, pretend = 0, frame = 0
 1873              		@ frame_needed = 0, uses_anonymous_args = 0
 1874              		@ link register save eliminated.
1298:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Check the parameters */
1299:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1875              		.loc 1 1299 3 view .LVU479
1300:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
1301:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   if (NewState != DISABLE)
 1876              		.loc 1 1301 3 view .LVU480
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 58


 1877              		.loc 1 1301 6 is_stmt 0 view .LVU481
 1878 0000 0028     		cmp	r0, #0
 1879 0002 06D0     		beq	.L143
1302:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
1303:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC->BDCR |= RCC_BDCR_BDRST;
 1880              		.loc 1 1303 5 is_stmt 1 view .LVU482
 1881              		.loc 1 1303 15 is_stmt 0 view .LVU483
 1882 0004 064A     		ldr	r2, .L145
 1883 0006 116A     		ldr	r1, [r2, #32]
 1884 0008 8023     		movs	r3, #128
 1885 000a 5B02     		lsls	r3, r3, #9
 1886 000c 0B43     		orrs	r3, r1
 1887 000e 1362     		str	r3, [r2, #32]
 1888              	.L142:
1304:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1305:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   else
1306:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
1307:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC->BDCR &= ~RCC_BDCR_BDRST;
1308:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1309:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** }
 1889              		.loc 1 1309 1 view .LVU484
 1890              		@ sp needed
 1891 0010 7047     		bx	lr
 1892              	.L143:
1307:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 1893              		.loc 1 1307 5 is_stmt 1 view .LVU485
1307:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 1894              		.loc 1 1307 15 is_stmt 0 view .LVU486
 1895 0012 034A     		ldr	r2, .L145
 1896 0014 136A     		ldr	r3, [r2, #32]
 1897 0016 0349     		ldr	r1, .L145+4
 1898 0018 0B40     		ands	r3, r1
 1899 001a 1362     		str	r3, [r2, #32]
 1900              		.loc 1 1309 1 view .LVU487
 1901 001c F8E7     		b	.L142
 1902              	.L146:
 1903 001e C046     		.align	2
 1904              	.L145:
 1905 0020 00100240 		.word	1073876992
 1906 0024 FFFFFEFF 		.word	-65537
 1907              		.cfi_endproc
 1908              	.LFE62:
 1910              		.section	.text.RCC_AHBPeriphClockCmd,"ax",%progbits
 1911              		.align	1
 1912              		.global	RCC_AHBPeriphClockCmd
 1913              		.syntax unified
 1914              		.code	16
 1915              		.thumb_func
 1916              		.fpu softvfp
 1918              	RCC_AHBPeriphClockCmd:
 1919              	.LVL101:
 1920              	.LFB63:
1310:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
1311:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
1312:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @brief  Enables or disables the AHB peripheral clock.
1313:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1314:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 59


1315:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         using it.    
1316:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB peripheral to gates its clock.
1317:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter can be any combination of the following values:
1318:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOA: GPIOA clock
1319:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOB: GPIOB clock
1320:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOC: GPIOC clock
1321:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOD: GPIOD clock
1322:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOE: GPIOE clock, applicable only for HK32F072 devices  
1323:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOF: GPIOF clock
1324:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_TS:    TS clock
1325:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_CRC:   CRC clock
1326:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_FLITF: (has effect only when the Flash memory is in power down m
1327:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_SRAM:  SRAM clock
1328:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_DMA1:  DMA1 clock
1329:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_DMA2:  DMA2 clock  
1330:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1331:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1332:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @retval None
1333:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
1334:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
1335:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** {
 1921              		.loc 1 1335 1 is_stmt 1 view -0
 1922              		.cfi_startproc
 1923              		@ args = 0, pretend = 0, frame = 0
 1924              		@ frame_needed = 0, uses_anonymous_args = 0
 1925              		@ link register save eliminated.
1336:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Check the parameters */
1337:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
 1926              		.loc 1 1337 3 view .LVU489
1338:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1927              		.loc 1 1338 3 view .LVU490
1339:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
1340:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   if (NewState != DISABLE)
 1928              		.loc 1 1340 3 view .LVU491
 1929              		.loc 1 1340 6 is_stmt 0 view .LVU492
 1930 0000 0029     		cmp	r1, #0
 1931 0002 04D0     		beq	.L148
1341:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
1342:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC->AHBENR |= RCC_AHBPeriph;
 1932              		.loc 1 1342 5 is_stmt 1 view .LVU493
 1933              		.loc 1 1342 17 is_stmt 0 view .LVU494
 1934 0004 044A     		ldr	r2, .L150
 1935 0006 5369     		ldr	r3, [r2, #20]
 1936 0008 1843     		orrs	r0, r3
 1937              	.LVL102:
 1938              		.loc 1 1342 17 view .LVU495
 1939 000a 5061     		str	r0, [r2, #20]
 1940              	.L147:
1343:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1344:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   else
1345:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
1346:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC->AHBENR &= ~RCC_AHBPeriph;
1347:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1348:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** }
 1941              		.loc 1 1348 1 view .LVU496
 1942              		@ sp needed
 1943 000c 7047     		bx	lr
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 60


 1944              	.LVL103:
 1945              	.L148:
1346:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 1946              		.loc 1 1346 5 is_stmt 1 view .LVU497
1346:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 1947              		.loc 1 1346 17 is_stmt 0 view .LVU498
 1948 000e 024A     		ldr	r2, .L150
 1949 0010 5369     		ldr	r3, [r2, #20]
 1950 0012 8343     		bics	r3, r0
 1951 0014 5361     		str	r3, [r2, #20]
 1952              		.loc 1 1348 1 view .LVU499
 1953 0016 F9E7     		b	.L147
 1954              	.L151:
 1955              		.align	2
 1956              	.L150:
 1957 0018 00100240 		.word	1073876992
 1958              		.cfi_endproc
 1959              	.LFE63:
 1961              		.section	.text.RCC_APB2PeriphClockCmd,"ax",%progbits
 1962              		.align	1
 1963              		.global	RCC_APB2PeriphClockCmd
 1964              		.syntax unified
 1965              		.code	16
 1966              		.thumb_func
 1967              		.fpu softvfp
 1969              	RCC_APB2PeriphClockCmd:
 1970              	.LVL104:
 1971              	.LFB64:
1349:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
1350:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
1351:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
1352:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1353:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1354:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         using it.
1355:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1356:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter can be any combination of the following values:
1357:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1358:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_USART6: USART6 clock  
1359:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_USART7: USART7 clock
1360:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_USART8: USART8 clock   
1361:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_ADC1:   ADC1 clock
1362:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_TIM1:   TIM1 clock
1363:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_SPI1:   SPI1 clock
1364:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_USART1: USART1 clock   
1365:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_TIM15:  TIM15 clock
1366:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_TIM16:  TIM16 clock
1367:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_TIM17:  TIM17 clock
1368:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_DBGMCU: DBGMCU clock
1369:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1370:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1371:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @retval None
1372:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
1373:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1374:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** {
 1972              		.loc 1 1374 1 is_stmt 1 view -0
 1973              		.cfi_startproc
 1974              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 61


 1975              		@ frame_needed = 0, uses_anonymous_args = 0
 1976              		@ link register save eliminated.
1375:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Check the parameters */
1376:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
 1977              		.loc 1 1376 3 view .LVU501
1377:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1978              		.loc 1 1377 3 view .LVU502
1378:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
1379:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   if (NewState != DISABLE)
 1979              		.loc 1 1379 3 view .LVU503
 1980              		.loc 1 1379 6 is_stmt 0 view .LVU504
 1981 0000 0029     		cmp	r1, #0
 1982 0002 04D0     		beq	.L153
1380:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
1381:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC->APB2ENR |= RCC_APB2Periph;
 1983              		.loc 1 1381 5 is_stmt 1 view .LVU505
 1984              		.loc 1 1381 18 is_stmt 0 view .LVU506
 1985 0004 044A     		ldr	r2, .L155
 1986 0006 9369     		ldr	r3, [r2, #24]
 1987 0008 1843     		orrs	r0, r3
 1988              	.LVL105:
 1989              		.loc 1 1381 18 view .LVU507
 1990 000a 9061     		str	r0, [r2, #24]
 1991              	.L152:
1382:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1383:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   else
1384:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
1385:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC->APB2ENR &= ~RCC_APB2Periph;
1386:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1387:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** }
 1992              		.loc 1 1387 1 view .LVU508
 1993              		@ sp needed
 1994 000c 7047     		bx	lr
 1995              	.LVL106:
 1996              	.L153:
1385:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 1997              		.loc 1 1385 5 is_stmt 1 view .LVU509
1385:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 1998              		.loc 1 1385 18 is_stmt 0 view .LVU510
 1999 000e 024A     		ldr	r2, .L155
 2000 0010 9369     		ldr	r3, [r2, #24]
 2001 0012 8343     		bics	r3, r0
 2002 0014 9361     		str	r3, [r2, #24]
 2003              		.loc 1 1387 1 view .LVU511
 2004 0016 F9E7     		b	.L152
 2005              	.L156:
 2006              		.align	2
 2007              	.L155:
 2008 0018 00100240 		.word	1073876992
 2009              		.cfi_endproc
 2010              	.LFE64:
 2012              		.section	.text.RCC_APB1PeriphClockCmd,"ax",%progbits
 2013              		.align	1
 2014              		.global	RCC_APB1PeriphClockCmd
 2015              		.syntax unified
 2016              		.code	16
 2017              		.thumb_func
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 62


 2018              		.fpu softvfp
 2020              	RCC_APB1PeriphClockCmd:
 2021              	.LVL107:
 2022              	.LFB65:
1388:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
1389:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
1390:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
1391:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1392:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1393:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         using it.
1394:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1395:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter can be any combination of the following values:
1396:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_TIM2:   TIM2 clock, applicable only for HK32F051 and HK32F072 dev
1397:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_TIM3:   TIM3 clock
1398:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_TIM6:   TIM6 clock
1399:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_TIM7:   TIM7 clock, applicable only for HK32F072 devices   
1400:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_TIM14:  TIM14 clock
1401:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_WWDG:   WWDG clock
1402:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_SPI2:   SPI2 clock
1403:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_USART2: USART2 clock
1404:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_USART3: USART3 clock, applicable only for HK32F072 and HK32F091 d
1405:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_USART4: USART4 clock, applicable only for HK32F072 and HK32F091 d
1406:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_USART5: USART5 clock, applicable only for HK32F091 devices       
1407:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_I2C1:   I2C1 clock
1408:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_I2C2:   I2C2 clock
1409:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_USB:    USB clock, applicable only for HK32F042 and HK32F072 devi
1410:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_CAN:    CAN clock, applicable only for HK32F042 and HK32F072 devi
1411:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_CRS:    CRS clock , applicable only for HK32F042 and HK32F072 dev
1412:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_PWR:    PWR clock
1413:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_DAC:    DAC clock, applicable only for HK32F051 and HK32F072 devi
1414:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_CEC:    CEC clock, applicable only for HK32F051, HK32F042 and HK3
1415:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1416:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1417:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @retval None
1418:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
1419:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1420:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** {
 2023              		.loc 1 1420 1 is_stmt 1 view -0
 2024              		.cfi_startproc
 2025              		@ args = 0, pretend = 0, frame = 0
 2026              		@ frame_needed = 0, uses_anonymous_args = 0
 2027              		@ link register save eliminated.
1421:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Check the parameters */
1422:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
 2028              		.loc 1 1422 3 view .LVU513
1423:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2029              		.loc 1 1423 3 view .LVU514
1424:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
1425:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   if (NewState != DISABLE)
 2030              		.loc 1 1425 3 view .LVU515
 2031              		.loc 1 1425 6 is_stmt 0 view .LVU516
 2032 0000 0029     		cmp	r1, #0
 2033 0002 04D0     		beq	.L158
1426:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
1427:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC->APB1ENR |= RCC_APB1Periph;
 2034              		.loc 1 1427 5 is_stmt 1 view .LVU517
 2035              		.loc 1 1427 18 is_stmt 0 view .LVU518
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 63


 2036 0004 044A     		ldr	r2, .L160
 2037 0006 D369     		ldr	r3, [r2, #28]
 2038 0008 1843     		orrs	r0, r3
 2039              	.LVL108:
 2040              		.loc 1 1427 18 view .LVU519
 2041 000a D061     		str	r0, [r2, #28]
 2042              	.L157:
1428:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1429:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   else
1430:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
1431:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC->APB1ENR &= ~RCC_APB1Periph;
1432:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1433:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** }
 2043              		.loc 1 1433 1 view .LVU520
 2044              		@ sp needed
 2045 000c 7047     		bx	lr
 2046              	.LVL109:
 2047              	.L158:
1431:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 2048              		.loc 1 1431 5 is_stmt 1 view .LVU521
1431:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 2049              		.loc 1 1431 18 is_stmt 0 view .LVU522
 2050 000e 024A     		ldr	r2, .L160
 2051 0010 D369     		ldr	r3, [r2, #28]
 2052 0012 8343     		bics	r3, r0
 2053 0014 D361     		str	r3, [r2, #28]
 2054              		.loc 1 1433 1 view .LVU523
 2055 0016 F9E7     		b	.L157
 2056              	.L161:
 2057              		.align	2
 2058              	.L160:
 2059 0018 00100240 		.word	1073876992
 2060              		.cfi_endproc
 2061              	.LFE65:
 2063              		.section	.text.RCC_AHBPeriphResetCmd,"ax",%progbits
 2064              		.align	1
 2065              		.global	RCC_AHBPeriphResetCmd
 2066              		.syntax unified
 2067              		.code	16
 2068              		.thumb_func
 2069              		.fpu softvfp
 2071              	RCC_AHBPeriphResetCmd:
 2072              	.LVL110:
 2073              	.LFB66:
1434:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
1435:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
1436:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @brief  Forces or releases AHB peripheral reset.
1437:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB peripheral to reset.
1438:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter can be any combination of the following values:
1439:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOA: GPIOA clock
1440:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOB: GPIOB clock
1441:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOC: GPIOC clock
1442:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOD: GPIOD clock
1443:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOE: GPIOE clock, applicable only for HK32F072 devices  
1444:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOF: GPIOF clock
1445:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_TS:    TS clock
1446:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 64


1447:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1448:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @retval None
1449:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
1450:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** void RCC_AHBPeriphResetCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
1451:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** {
 2074              		.loc 1 1451 1 is_stmt 1 view -0
 2075              		.cfi_startproc
 2076              		@ args = 0, pretend = 0, frame = 0
 2077              		@ frame_needed = 0, uses_anonymous_args = 0
 2078              		@ link register save eliminated.
1452:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Check the parameters */
1453:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
 2079              		.loc 1 1453 3 view .LVU525
1454:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2080              		.loc 1 1454 3 view .LVU526
1455:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
1456:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   if (NewState != DISABLE)
 2081              		.loc 1 1456 3 view .LVU527
 2082              		.loc 1 1456 6 is_stmt 0 view .LVU528
 2083 0000 0029     		cmp	r1, #0
 2084 0002 04D0     		beq	.L163
1457:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
1458:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC->AHBRSTR |= RCC_AHBPeriph;
 2085              		.loc 1 1458 5 is_stmt 1 view .LVU529
 2086              		.loc 1 1458 18 is_stmt 0 view .LVU530
 2087 0004 044A     		ldr	r2, .L165
 2088 0006 936A     		ldr	r3, [r2, #40]
 2089 0008 1843     		orrs	r0, r3
 2090              	.LVL111:
 2091              		.loc 1 1458 18 view .LVU531
 2092 000a 9062     		str	r0, [r2, #40]
 2093              	.L162:
1459:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1460:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   else
1461:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
1462:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC->AHBRSTR &= ~RCC_AHBPeriph;
1463:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1464:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** }
 2094              		.loc 1 1464 1 view .LVU532
 2095              		@ sp needed
 2096 000c 7047     		bx	lr
 2097              	.LVL112:
 2098              	.L163:
1462:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 2099              		.loc 1 1462 5 is_stmt 1 view .LVU533
1462:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 2100              		.loc 1 1462 18 is_stmt 0 view .LVU534
 2101 000e 024A     		ldr	r2, .L165
 2102 0010 936A     		ldr	r3, [r2, #40]
 2103 0012 8343     		bics	r3, r0
 2104 0014 9362     		str	r3, [r2, #40]
 2105              		.loc 1 1464 1 view .LVU535
 2106 0016 F9E7     		b	.L162
 2107              	.L166:
 2108              		.align	2
 2109              	.L165:
 2110 0018 00100240 		.word	1073876992
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 65


 2111              		.cfi_endproc
 2112              	.LFE66:
 2114              		.section	.text.RCC_APB2PeriphResetCmd,"ax",%progbits
 2115              		.align	1
 2116              		.global	RCC_APB2PeriphResetCmd
 2117              		.syntax unified
 2118              		.code	16
 2119              		.thumb_func
 2120              		.fpu softvfp
 2122              	RCC_APB2PeriphResetCmd:
 2123              	.LVL113:
 2124              	.LFB67:
1465:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
1466:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
1467:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @brief  Forces or releases High Speed APB (APB2) peripheral reset.
1468:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to reset.
1469:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter can be any combination of the following values:
1470:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1471:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_USART6: USART6 clock  
1472:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_USART7: USART7 clock
1473:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_USART8: USART8 clock   
1474:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_ADC1:   ADC1 clock
1475:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_TIM1:   TIM1 clock
1476:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_SPI1:   SPI1 clock
1477:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_USART1: USART1 clock
1478:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_TIM15:  TIM15 clock
1479:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_TIM16:  TIM16 clock
1480:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_TIM17:  TIM17 clock
1481:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_DBGMCU: DBGMCU clock
1482:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1483:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1484:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @retval None
1485:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
1486:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1487:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** {
 2125              		.loc 1 1487 1 is_stmt 1 view -0
 2126              		.cfi_startproc
 2127              		@ args = 0, pretend = 0, frame = 0
 2128              		@ frame_needed = 0, uses_anonymous_args = 0
 2129              		@ link register save eliminated.
1488:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Check the parameters */
1489:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
 2130              		.loc 1 1489 3 view .LVU537
1490:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2131              		.loc 1 1490 3 view .LVU538
1491:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
1492:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   if (NewState != DISABLE)
 2132              		.loc 1 1492 3 view .LVU539
 2133              		.loc 1 1492 6 is_stmt 0 view .LVU540
 2134 0000 0029     		cmp	r1, #0
 2135 0002 04D0     		beq	.L168
1493:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
1494:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC->APB2RSTR |= RCC_APB2Periph;
 2136              		.loc 1 1494 5 is_stmt 1 view .LVU541
 2137              		.loc 1 1494 19 is_stmt 0 view .LVU542
 2138 0004 044A     		ldr	r2, .L170
 2139 0006 D368     		ldr	r3, [r2, #12]
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 66


 2140 0008 1843     		orrs	r0, r3
 2141              	.LVL114:
 2142              		.loc 1 1494 19 view .LVU543
 2143 000a D060     		str	r0, [r2, #12]
 2144              	.L167:
1495:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1496:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   else
1497:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
1498:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC->APB2RSTR &= ~RCC_APB2Periph;
1499:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1500:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** }
 2145              		.loc 1 1500 1 view .LVU544
 2146              		@ sp needed
 2147 000c 7047     		bx	lr
 2148              	.LVL115:
 2149              	.L168:
1498:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 2150              		.loc 1 1498 5 is_stmt 1 view .LVU545
1498:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 2151              		.loc 1 1498 19 is_stmt 0 view .LVU546
 2152 000e 024A     		ldr	r2, .L170
 2153 0010 D368     		ldr	r3, [r2, #12]
 2154 0012 8343     		bics	r3, r0
 2155 0014 D360     		str	r3, [r2, #12]
 2156              		.loc 1 1500 1 view .LVU547
 2157 0016 F9E7     		b	.L167
 2158              	.L171:
 2159              		.align	2
 2160              	.L170:
 2161 0018 00100240 		.word	1073876992
 2162              		.cfi_endproc
 2163              	.LFE67:
 2165              		.section	.text.RCC_APB1PeriphResetCmd,"ax",%progbits
 2166              		.align	1
 2167              		.global	RCC_APB1PeriphResetCmd
 2168              		.syntax unified
 2169              		.code	16
 2170              		.thumb_func
 2171              		.fpu softvfp
 2173              	RCC_APB1PeriphResetCmd:
 2174              	.LVL116:
 2175              	.LFB68:
1501:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
1502:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
1503:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @brief  Forces or releases Low Speed APB (APB1) peripheral reset.
1504:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to reset.
1505:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter can be any combination of the following values:
1506:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_TIM2:   TIM2 clock, applicable only for HK32F051 and HK32F072 dev
1507:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_TIM3:   TIM3 clock
1508:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_TIM6:   TIM6 clock
1509:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_TIM7:   TIM7 clock, applicable only for HK32F072 devices   
1510:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_TIM14:  TIM14 clock
1511:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_WWDG:   WWDG clock
1512:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_SPI2:   SPI2 clock
1513:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_USART2: USART2 clock
1514:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_USART3: USART3 clock, applicable only for HK32F072 and HK32F091 d
1515:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_USART4: USART4 clock, applicable only for HK32F072 and HK32F091 d
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 67


1516:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_USART5: USART5 clock, applicable only for HK32F091 devices       
1517:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_I2C1:   I2C1 clock
1518:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_I2C2:   I2C2 clock
1519:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_USB:    USB clock, applicable only for HK32F042 and HK32F072 devi
1520:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_CAN:    CAN clock, applicable only for HK32F042 and HK32F072 devi
1521:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_CRS:    CRS clock , applicable only for HK32F042 and HK32F072 dev
1522:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_PWR:    PWR clock
1523:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_DAC:    DAC clock, applicable only for HK32F051 and HK32F072 devi
1524:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_CEC:    CEC clock, applicable only for HK32F051, HK32F042 and HK3
1525:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1526:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1527:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @retval None
1528:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
1529:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1530:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** {
 2176              		.loc 1 1530 1 is_stmt 1 view -0
 2177              		.cfi_startproc
 2178              		@ args = 0, pretend = 0, frame = 0
 2179              		@ frame_needed = 0, uses_anonymous_args = 0
 2180              		@ link register save eliminated.
1531:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Check the parameters */
1532:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
 2181              		.loc 1 1532 3 view .LVU549
1533:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2182              		.loc 1 1533 3 view .LVU550
1534:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
1535:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   if (NewState != DISABLE)
 2183              		.loc 1 1535 3 view .LVU551
 2184              		.loc 1 1535 6 is_stmt 0 view .LVU552
 2185 0000 0029     		cmp	r1, #0
 2186 0002 04D0     		beq	.L173
1536:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
1537:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC->APB1RSTR |= RCC_APB1Periph;
 2187              		.loc 1 1537 5 is_stmt 1 view .LVU553
 2188              		.loc 1 1537 19 is_stmt 0 view .LVU554
 2189 0004 044A     		ldr	r2, .L175
 2190 0006 1369     		ldr	r3, [r2, #16]
 2191 0008 1843     		orrs	r0, r3
 2192              	.LVL117:
 2193              		.loc 1 1537 19 view .LVU555
 2194 000a 1061     		str	r0, [r2, #16]
 2195              	.L172:
1538:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1539:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   else
1540:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
1541:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     RCC->APB1RSTR &= ~RCC_APB1Periph;
1542:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1543:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** }
 2196              		.loc 1 1543 1 view .LVU556
 2197              		@ sp needed
 2198 000c 7047     		bx	lr
 2199              	.LVL118:
 2200              	.L173:
1541:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 2201              		.loc 1 1541 5 is_stmt 1 view .LVU557
1541:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 2202              		.loc 1 1541 19 is_stmt 0 view .LVU558
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 68


 2203 000e 024A     		ldr	r2, .L175
 2204 0010 1369     		ldr	r3, [r2, #16]
 2205 0012 8343     		bics	r3, r0
 2206 0014 1361     		str	r3, [r2, #16]
 2207              		.loc 1 1543 1 view .LVU559
 2208 0016 F9E7     		b	.L172
 2209              	.L176:
 2210              		.align	2
 2211              	.L175:
 2212 0018 00100240 		.word	1073876992
 2213              		.cfi_endproc
 2214              	.LFE68:
 2216              		.section	.text.RCC_ITConfig,"ax",%progbits
 2217              		.align	1
 2218              		.global	RCC_ITConfig
 2219              		.syntax unified
 2220              		.code	16
 2221              		.thumb_func
 2222              		.fpu softvfp
 2224              	RCC_ITConfig:
 2225              	.LVL119:
 2226              	.LFB69:
1544:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
1545:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
1546:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @}
1547:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
1548:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
1549:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /** @defgroup RCC_Group4 Interrupts and flags management functions
1550:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****  *  @brief   Interrupts and flags management functions 
1551:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****  *
1552:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** @verbatim
1553:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****  ===============================================================================
1554:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****              ##### Interrupts and flags management functions #####
1555:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****  ===============================================================================
1556:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** @endverbatim
1557:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @{
1558:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
1559:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
1560:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
1561:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @brief  Enables or disables the specified RCC interrupts.
1562:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @note   The CSS interrupt doesn't have an enable bit; once the CSS is enabled
1563:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         and if the HSE clock fails, the CSS interrupt occurs and an NMI is
1564:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         automatically generated. The NMI will be executed indefinitely, and 
1565:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         since NMI has higher priority than any other IRQ (and main program)
1566:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         the application will be stacked in the NMI ISR unless the CSS interrupt
1567:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         pending bit is cleared.
1568:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt sources to be enabled or disabled.
1569:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter can be any combination of the following values:
1570:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *              @arg RCC_IT_LSIRDY: LSI ready interrupt
1571:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *              @arg RCC_IT_LSERDY: LSE ready interrupt
1572:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *              @arg RCC_IT_HSIRDY: HSI ready interrupt
1573:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *              @arg RCC_IT_HSERDY: HSE ready interrupt
1574:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *              @arg RCC_IT_PLLRDY: PLL ready interrupt
1575:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *              @arg RCC_IT_HSI14RDY: HSI14 ready interrupt
1576:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *              @arg RCC_IT_HSI48RDY: HSI48 ready interrupt, applicable only for HK32F072 devices 
1577:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  NewState: new state of the specified RCC interrupts.
1578:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 69


1579:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @retval None
1580:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
1581:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
1582:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** {
 2227              		.loc 1 1582 1 is_stmt 1 view -0
 2228              		.cfi_startproc
 2229              		@ args = 0, pretend = 0, frame = 0
 2230              		@ frame_needed = 0, uses_anonymous_args = 0
 2231              		@ link register save eliminated.
1583:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Check the parameters */
1584:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_RCC_IT(RCC_IT));
 2232              		.loc 1 1584 3 view .LVU561
1585:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2233              		.loc 1 1585 3 view .LVU562
1586:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
1587:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   if (NewState != DISABLE)
 2234              		.loc 1 1587 3 view .LVU563
 2235              		.loc 1 1587 6 is_stmt 0 view .LVU564
 2236 0000 0029     		cmp	r1, #0
 2237 0002 04D0     		beq	.L178
1588:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
1589:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     /* Perform Byte access to RCC_CIR[13:8] bits to enable the selected interrupts */
1590:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE1_ADDRESS |= RCC_IT;
 2238              		.loc 1 1590 5 is_stmt 1 view .LVU565
 2239              		.loc 1 1590 41 is_stmt 0 view .LVU566
 2240 0004 044A     		ldr	r2, .L180
 2241 0006 1378     		ldrb	r3, [r2]
 2242 0008 1843     		orrs	r0, r3
 2243              	.LVL120:
 2244              		.loc 1 1590 41 view .LVU567
 2245 000a 1070     		strb	r0, [r2]
 2246              	.L177:
1591:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1592:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   else
1593:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
1594:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     /* Perform Byte access to RCC_CIR[13:8] bits to disable the selected interrupts */
1595:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE1_ADDRESS &= (uint8_t)~RCC_IT;
1596:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1597:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** }
 2247              		.loc 1 1597 1 view .LVU568
 2248              		@ sp needed
 2249 000c 7047     		bx	lr
 2250              	.LVL121:
 2251              	.L178:
1595:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 2252              		.loc 1 1595 5 is_stmt 1 view .LVU569
1595:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 2253              		.loc 1 1595 41 is_stmt 0 view .LVU570
 2254 000e 024A     		ldr	r2, .L180
 2255 0010 1378     		ldrb	r3, [r2]
 2256 0012 8343     		bics	r3, r0
 2257 0014 1370     		strb	r3, [r2]
 2258              		.loc 1 1597 1 view .LVU571
 2259 0016 F9E7     		b	.L177
 2260              	.L181:
 2261              		.align	2
 2262              	.L180:
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 70


 2263 0018 09100240 		.word	1073877001
 2264              		.cfi_endproc
 2265              	.LFE69:
 2267              		.section	.text.RCC_GetFlagStatus,"ax",%progbits
 2268              		.align	1
 2269              		.global	RCC_GetFlagStatus
 2270              		.syntax unified
 2271              		.code	16
 2272              		.thumb_func
 2273              		.fpu softvfp
 2275              	RCC_GetFlagStatus:
 2276              	.LVL122:
 2277              	.LFB70:
1598:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
1599:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
1600:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @brief  Checks whether the specified RCC flag is set or not.
1601:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  RCC_FLAG: specifies the flag to check.
1602:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter can be one of the following values:
1603:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready  
1604:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
1605:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_FLAG_PLLRDY: PLL clock ready
1606:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
1607:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
1608:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_FLAG_OBLRST: Option Byte Loader (OBL) reset 
1609:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_FLAG_PINRST: Pin reset
1610:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_FLAG_V18PWRRSTF:  V1.8 power domain reset  
1611:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_FLAG_PORRST: POR/PDR reset
1612:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_FLAG_SFTRST: Software reset
1613:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
1614:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_FLAG_WWDGRST: Window Watchdog reset
1615:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_FLAG_LPWRRST: Low Power reset
1616:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_FLAG_HSI14RDY: HSI14 oscillator clock ready
1617:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_FLAG_HSI48RDY: HSI48 oscillator clock ready, applicable only for HK32F072 
1618:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @retval The new state of RCC_FLAG (SET or RESET).
1619:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
1620:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
1621:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** {
 2278              		.loc 1 1621 1 is_stmt 1 view -0
 2279              		.cfi_startproc
 2280              		@ args = 0, pretend = 0, frame = 0
 2281              		@ frame_needed = 0, uses_anonymous_args = 0
 2282              		@ link register save eliminated.
1622:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   uint32_t tmp = 0;
 2283              		.loc 1 1622 3 view .LVU573
1623:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   uint32_t statusreg = 0;
 2284              		.loc 1 1623 3 view .LVU574
1624:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   FlagStatus bitstatus = RESET;
 2285              		.loc 1 1624 3 view .LVU575
1625:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
1626:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Check the parameters */
1627:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_RCC_FLAG(RCC_FLAG));
 2286              		.loc 1 1627 3 view .LVU576
1628:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
1629:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Get the RCC register index */
1630:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   tmp = RCC_FLAG >> 5;
 2287              		.loc 1 1630 3 view .LVU577
 2288              		.loc 1 1630 18 is_stmt 0 view .LVU578
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 71


 2289 0000 4309     		lsrs	r3, r0, #5
 2290              	.LVL123:
1631:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
1632:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   if (tmp == 0)               /* The flag to check is in CR register */
 2291              		.loc 1 1632 3 is_stmt 1 view .LVU579
 2292              		.loc 1 1632 6 is_stmt 0 view .LVU580
 2293 0002 08D1     		bne	.L183
1633:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
1634:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     statusreg = RCC->CR;
 2294              		.loc 1 1634 5 is_stmt 1 view .LVU581
 2295              		.loc 1 1634 15 is_stmt 0 view .LVU582
 2296 0004 0B4B     		ldr	r3, .L191
 2297              	.LVL124:
 2298              		.loc 1 1634 15 view .LVU583
 2299 0006 1A68     		ldr	r2, [r3]
 2300              	.LVL125:
 2301              	.L184:
1635:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1636:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   else if (tmp == 1)          /* The flag to check is in BDCR register */
1637:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
1638:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     statusreg = RCC->BDCR;
1639:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1640:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   else if (tmp == 2)          /* The flag to check is in CSR register */
1641:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
1642:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     statusreg = RCC->CSR;
1643:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1644:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   else                        /* The flag to check is in CR2 register */
1645:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
1646:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     statusreg = RCC->CR2;
1647:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }    
1648:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
1649:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Get the flag position */
1650:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   tmp = RCC_FLAG & FLAG_MASK;
 2302              		.loc 1 1650 3 is_stmt 1 view .LVU584
 2303              		.loc 1 1650 7 is_stmt 0 view .LVU585
 2304 0008 1F23     		movs	r3, #31
 2305 000a 1840     		ands	r0, r3
 2306              	.LVL126:
1651:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
1652:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 2307              		.loc 1 1652 3 is_stmt 1 view .LVU586
 2308              		.loc 1 1652 42 is_stmt 0 view .LVU587
 2309 000c C240     		lsrs	r2, r2, r0
 2310              	.LVL127:
 2311              		.loc 1 1652 6 view .LVU588
 2312 000e D307     		lsls	r3, r2, #31
 2313 0010 0ED5     		bpl	.L188
1653:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
1654:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     bitstatus = SET;
 2314              		.loc 1 1654 15 view .LVU589
 2315 0012 0120     		movs	r0, #1
 2316              	.LVL128:
 2317              	.L187:
1655:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1656:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   else
1657:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
1658:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     bitstatus = RESET;
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 72


1659:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1660:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Return the flag status */
1661:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   return bitstatus;
 2318              		.loc 1 1661 3 is_stmt 1 view .LVU590
1662:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** }
 2319              		.loc 1 1662 1 is_stmt 0 view .LVU591
 2320              		@ sp needed
 2321 0014 7047     		bx	lr
 2322              	.LVL129:
 2323              	.L183:
1636:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 2324              		.loc 1 1636 8 is_stmt 1 view .LVU592
1636:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 2325              		.loc 1 1636 11 is_stmt 0 view .LVU593
 2326 0016 012B     		cmp	r3, #1
 2327 0018 04D0     		beq	.L189
1640:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 2328              		.loc 1 1640 8 is_stmt 1 view .LVU594
1640:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 2329              		.loc 1 1640 11 is_stmt 0 view .LVU595
 2330 001a 022B     		cmp	r3, #2
 2331 001c 05D0     		beq	.L190
1646:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }    
 2332              		.loc 1 1646 5 is_stmt 1 view .LVU596
1646:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }    
 2333              		.loc 1 1646 15 is_stmt 0 view .LVU597
 2334 001e 054B     		ldr	r3, .L191
 2335              	.LVL130:
1646:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }    
 2336              		.loc 1 1646 15 view .LVU598
 2337 0020 5A6B     		ldr	r2, [r3, #52]
 2338              	.LVL131:
1646:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }    
 2339              		.loc 1 1646 15 view .LVU599
 2340 0022 F1E7     		b	.L184
 2341              	.LVL132:
 2342              	.L189:
1638:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 2343              		.loc 1 1638 5 is_stmt 1 view .LVU600
1638:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 2344              		.loc 1 1638 15 is_stmt 0 view .LVU601
 2345 0024 034B     		ldr	r3, .L191
 2346              	.LVL133:
1638:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 2347              		.loc 1 1638 15 view .LVU602
 2348 0026 1A6A     		ldr	r2, [r3, #32]
 2349              	.LVL134:
1638:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 2350              		.loc 1 1638 15 view .LVU603
 2351 0028 EEE7     		b	.L184
 2352              	.LVL135:
 2353              	.L190:
1642:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 2354              		.loc 1 1642 5 is_stmt 1 view .LVU604
1642:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 2355              		.loc 1 1642 15 is_stmt 0 view .LVU605
 2356 002a 024B     		ldr	r3, .L191
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 73


 2357              	.LVL136:
1642:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 2358              		.loc 1 1642 15 view .LVU606
 2359 002c 5A6A     		ldr	r2, [r3, #36]
 2360              	.LVL137:
1642:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 2361              		.loc 1 1642 15 view .LVU607
 2362 002e EBE7     		b	.L184
 2363              	.LVL138:
 2364              	.L188:
1658:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 2365              		.loc 1 1658 15 view .LVU608
 2366 0030 0020     		movs	r0, #0
 2367              	.LVL139:
1658:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 2368              		.loc 1 1658 15 view .LVU609
 2369 0032 EFE7     		b	.L187
 2370              	.L192:
 2371              		.align	2
 2372              	.L191:
 2373 0034 00100240 		.word	1073876992
 2374              		.cfi_endproc
 2375              	.LFE70:
 2377              		.section	.text.RCC_WaitForHSEStartUp,"ax",%progbits
 2378              		.align	1
 2379              		.global	RCC_WaitForHSEStartUp
 2380              		.syntax unified
 2381              		.code	16
 2382              		.thumb_func
 2383              		.fpu softvfp
 2385              	RCC_WaitForHSEStartUp:
 2386              	.LFB35:
 199:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   __IO uint32_t StartUpCounter = 0;
 2387              		.loc 1 199 1 is_stmt 1 view -0
 2388              		.cfi_startproc
 2389              		@ args = 0, pretend = 0, frame = 8
 2390              		@ frame_needed = 0, uses_anonymous_args = 0
 2391 0000 00B5     		push	{lr}
 2392              	.LCFI2:
 2393              		.cfi_def_cfa_offset 4
 2394              		.cfi_offset 14, -4
 2395 0002 83B0     		sub	sp, sp, #12
 2396              	.LCFI3:
 2397              		.cfi_def_cfa_offset 16
 200:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   ErrorStatus status = ERROR;
 2398              		.loc 1 200 3 view .LVU611
 200:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   ErrorStatus status = ERROR;
 2399              		.loc 1 200 17 is_stmt 0 view .LVU612
 2400 0004 0023     		movs	r3, #0
 2401 0006 0193     		str	r3, [sp, #4]
 201:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   FlagStatus HSEStatus = RESET;
 2402              		.loc 1 201 3 is_stmt 1 view .LVU613
 2403              	.LVL140:
 202:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
 2404              		.loc 1 202 3 view .LVU614
 2405              	.L195:
 205:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 74


 2406              		.loc 1 205 3 discriminator 2 view .LVU615
 207:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     StartUpCounter++;  
 2407              		.loc 1 207 5 discriminator 2 view .LVU616
 207:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     StartUpCounter++;  
 2408              		.loc 1 207 17 is_stmt 0 discriminator 2 view .LVU617
 2409 0008 1120     		movs	r0, #17
 2410 000a FFF7FEFF 		bl	RCC_GetFlagStatus
 2411              	.LVL141:
 208:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 2412              		.loc 1 208 5 is_stmt 1 discriminator 2 view .LVU618
 208:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 2413              		.loc 1 208 19 is_stmt 0 discriminator 2 view .LVU619
 2414 000e 019B     		ldr	r3, [sp, #4]
 2415 0010 0133     		adds	r3, r3, #1
 2416 0012 0193     		str	r3, [sp, #4]
 209:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
 2417              		.loc 1 209 10 is_stmt 1 discriminator 2 view .LVU620
 209:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
 2418              		.loc 1 209 27 is_stmt 0 discriminator 2 view .LVU621
 2419 0014 019A     		ldr	r2, [sp, #4]
 209:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
 2420              		.loc 1 209 3 discriminator 2 view .LVU622
 2421 0016 A023     		movs	r3, #160
 2422 0018 DB01     		lsls	r3, r3, #7
 2423 001a 9A42     		cmp	r2, r3
 2424 001c 01D0     		beq	.L194
 209:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
 2425              		.loc 1 209 51 discriminator 1 view .LVU623
 2426 001e 0028     		cmp	r0, #0
 2427 0020 F2D0     		beq	.L195
 2428              	.L194:
 211:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 2429              		.loc 1 211 3 is_stmt 1 view .LVU624
 211:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 2430              		.loc 1 211 7 is_stmt 0 view .LVU625
 2431 0022 1120     		movs	r0, #17
 2432              	.LVL142:
 211:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 2433              		.loc 1 211 7 view .LVU626
 2434 0024 FFF7FEFF 		bl	RCC_GetFlagStatus
 2435              	.LVL143:
 211:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
 2436              		.loc 1 211 6 view .LVU627
 2437 0028 0028     		cmp	r0, #0
 2438 002a 00D0     		beq	.L196
 213:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 2439              		.loc 1 213 12 view .LVU628
 2440 002c 0120     		movs	r0, #1
 2441              	.L196:
 2442              	.LVL144:
 219:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** }
 2443              		.loc 1 219 3 is_stmt 1 view .LVU629
 220:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
 2444              		.loc 1 220 1 is_stmt 0 view .LVU630
 2445 002e 03B0     		add	sp, sp, #12
 2446              		@ sp needed
 2447 0030 00BD     		pop	{pc}
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 75


 2448              		.cfi_endproc
 2449              	.LFE35:
 2451              		.section	.text.RCC_ClearFlag,"ax",%progbits
 2452              		.align	1
 2453              		.global	RCC_ClearFlag
 2454              		.syntax unified
 2455              		.code	16
 2456              		.thumb_func
 2457              		.fpu softvfp
 2459              	RCC_ClearFlag:
 2460              	.LFB71:
1663:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
1664:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
1665:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @brief  Clears the RCC reset flags.
1666:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         The reset flags are: RCC_FLAG_OBLRST, RCC_FLAG_PINRST, RCC_FLAG_V18PWRRSTF,
1667:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         RCC_FLAG_PORRST, RCC_FLAG_SFTRST, RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST,
1668:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *         RCC_FLAG_LPWRRST.
1669:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  None
1670:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @retval None
1671:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
1672:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** void RCC_ClearFlag(void)
1673:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** {
 2461              		.loc 1 1673 1 is_stmt 1 view -0
 2462              		.cfi_startproc
 2463              		@ args = 0, pretend = 0, frame = 0
 2464              		@ frame_needed = 0, uses_anonymous_args = 0
 2465              		@ link register save eliminated.
1674:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Set RMVF bit to clear the reset flags */
1675:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   RCC->CSR |= RCC_CSR_RMVF;
 2466              		.loc 1 1675 3 view .LVU632
 2467              		.loc 1 1675 12 is_stmt 0 view .LVU633
 2468 0000 034A     		ldr	r2, .L198
 2469 0002 516A     		ldr	r1, [r2, #36]
 2470 0004 8023     		movs	r3, #128
 2471 0006 5B04     		lsls	r3, r3, #17
 2472 0008 0B43     		orrs	r3, r1
 2473 000a 5362     		str	r3, [r2, #36]
1676:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** }
 2474              		.loc 1 1676 1 view .LVU634
 2475              		@ sp needed
 2476 000c 7047     		bx	lr
 2477              	.L199:
 2478 000e C046     		.align	2
 2479              	.L198:
 2480 0010 00100240 		.word	1073876992
 2481              		.cfi_endproc
 2482              	.LFE71:
 2484              		.section	.text.RCC_GetITStatus,"ax",%progbits
 2485              		.align	1
 2486              		.global	RCC_GetITStatus
 2487              		.syntax unified
 2488              		.code	16
 2489              		.thumb_func
 2490              		.fpu softvfp
 2492              	RCC_GetITStatus:
 2493              	.LVL145:
 2494              	.LFB72:
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 76


1677:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
1678:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
1679:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @brief  Checks whether the specified RCC interrupt has occurred or not.
1680:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt source to check.
1681:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter can be one of the following values:
1682:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_IT_LSIRDY: LSI ready interrupt
1683:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_IT_LSERDY: LSE ready interrupt
1684:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_IT_HSIRDY: HSI ready interrupt
1685:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_IT_HSERDY: HSE ready interrupt
1686:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_IT_PLLRDY: PLL ready interrupt
1687:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_IT_HSI14RDY: HSI14 ready interrupt
1688:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_IT_HSI48RDY: HSI48 ready interrupt, applicable only for HK32F072 devices  
1689:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_IT_CSS: Clock Security System interrupt
1690:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @retval The new state of RCC_IT (SET or RESET).
1691:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
1692:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** ITStatus RCC_GetITStatus(uint8_t RCC_IT)
1693:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** {
 2495              		.loc 1 1693 1 is_stmt 1 view -0
 2496              		.cfi_startproc
 2497              		@ args = 0, pretend = 0, frame = 0
 2498              		@ frame_needed = 0, uses_anonymous_args = 0
 2499              		@ link register save eliminated.
1694:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   ITStatus bitstatus = RESET;
 2500              		.loc 1 1694 3 view .LVU636
1695:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
1696:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Check the parameters */
1697:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_RCC_GET_IT(RCC_IT));
 2501              		.loc 1 1697 3 view .LVU637
1698:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
1699:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Check the status of the specified RCC interrupt */
1700:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 2502              		.loc 1 1700 3 view .LVU638
 2503              		.loc 1 1700 11 is_stmt 0 view .LVU639
 2504 0000 034B     		ldr	r3, .L203
 2505 0002 9B68     		ldr	r3, [r3, #8]
 2506              		.loc 1 1700 6 view .LVU640
 2507 0004 0342     		tst	r3, r0
 2508 0006 01D0     		beq	.L202
1701:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
1702:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     bitstatus = SET;
 2509              		.loc 1 1702 15 view .LVU641
 2510 0008 0120     		movs	r0, #1
 2511              	.LVL146:
 2512              	.L201:
1703:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1704:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   else
1705:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   {
1706:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****     bitstatus = RESET;
1707:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
1708:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Return the RCC_IT status */
1709:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   return  bitstatus;
 2513              		.loc 1 1709 3 is_stmt 1 view .LVU642
1710:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** }
 2514              		.loc 1 1710 1 is_stmt 0 view .LVU643
 2515              		@ sp needed
 2516 000a 7047     		bx	lr
 2517              	.LVL147:
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 77


 2518              	.L202:
1706:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 2519              		.loc 1 1706 15 view .LVU644
 2520 000c 0020     		movs	r0, #0
 2521              	.LVL148:
1706:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   }
 2522              		.loc 1 1706 15 view .LVU645
 2523 000e FCE7     		b	.L201
 2524              	.L204:
 2525              		.align	2
 2526              	.L203:
 2527 0010 00100240 		.word	1073876992
 2528              		.cfi_endproc
 2529              	.LFE72:
 2531              		.section	.text.RCC_ClearITPendingBit,"ax",%progbits
 2532              		.align	1
 2533              		.global	RCC_ClearITPendingBit
 2534              		.syntax unified
 2535              		.code	16
 2536              		.thumb_func
 2537              		.fpu softvfp
 2539              	RCC_ClearITPendingBit:
 2540              	.LVL149:
 2541              	.LFB73:
1711:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** 
1712:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** /**
1713:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @brief  Clears the RCC's interrupt pending bits.
1714:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @param  RCC_IT: specifies the interrupt pending bit to clear.
1715:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *          This parameter can be any combination of the following values:
1716:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_IT_LSIRDY: LSI ready interrupt
1717:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_IT_LSERDY: LSE ready interrupt
1718:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_IT_HSIRDY: HSI ready interrupt
1719:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_IT_HSERDY: HSE ready interrupt
1720:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_IT_PLLRDY: PLL ready interrupt
1721:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_IT_HSI48RDY: HSI48 ready interrupt, applicable only for HK32F072 devices 
1722:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_IT_HSI14RDY: HSI14 ready interrupt
1723:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *             @arg RCC_IT_CSS: Clock Security System interrupt
1724:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   * @retval None
1725:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   */
1726:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** void RCC_ClearITPendingBit(uint8_t RCC_IT)
1727:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** {
 2542              		.loc 1 1727 1 is_stmt 1 view -0
 2543              		.cfi_startproc
 2544              		@ args = 0, pretend = 0, frame = 0
 2545              		@ frame_needed = 0, uses_anonymous_args = 0
 2546              		@ link register save eliminated.
1728:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Check the parameters */
1729:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   assert_param(IS_RCC_CLEAR_IT(RCC_IT));
 2547              		.loc 1 1729 3 view .LVU647
1730:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   
1731:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
1732:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****      pending bits */
1733:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c ****   *(__IO uint8_t *) CIR_BYTE2_ADDRESS = RCC_IT;
 2548              		.loc 1 1733 3 view .LVU648
 2549              		.loc 1 1733 39 is_stmt 0 view .LVU649
 2550 0000 014B     		ldr	r3, .L206
 2551 0002 1870     		strb	r0, [r3]
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 78


1734:hk_lib/HK32F030/STD_LIB/src/hk32f0xx_rcc.c **** }
 2552              		.loc 1 1734 1 view .LVU650
 2553              		@ sp needed
 2554 0004 7047     		bx	lr
 2555              	.L207:
 2556 0006 C046     		.align	2
 2557              	.L206:
 2558 0008 0A100240 		.word	1073877002
 2559              		.cfi_endproc
 2560              	.LFE73:
 2562              		.section	.data.APBAHBPrescTable,"aw"
 2563              		.align	2
 2564              		.set	.LANCHOR0,. + 0
 2567              	APBAHBPrescTable:
 2568 0000 00000000 		.ascii	"\000\000\000\000\001\002\003\004\001\002\003\004\006"
 2568      01020304 
 2568      01020304 
 2568      06
 2569 000d 070809   		.ascii	"\007\010\011"
 2570              		.text
 2571              	.Letext0:
 2572              		.file 2 "/Users/chenxiaonian/tool/gcc-arm-none-eabi-10.3-2021.07-mac-10.14.6/gcc-arm-none-eabi-10.
 2573              		.file 3 "/Users/chenxiaonian/tool/gcc-arm-none-eabi-10.3-2021.07-mac-10.14.6/gcc-arm-none-eabi-10.
 2574              		.file 4 "hk_lib/HK32F030/CMSIS/CM0/DeviceSupport/hk32f0xx.h"
 2575              		.file 5 "hk_lib/HK32F030/STD_LIB/inc/hk32f0xx_rcc.h"
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 79


DEFINED SYMBOLS
                            *ABS*:0000000000000000 hk32f0xx_rcc.c
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:16     .text.RCC_DeInit:0000000000000000 $t
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:24     .text.RCC_DeInit:0000000000000000 RCC_DeInit
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:90     .text.RCC_DeInit:0000000000000048 $d
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:100    .text.RCC_HSEConfig:0000000000000000 $t
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:107    .text.RCC_HSEConfig:0000000000000000 RCC_HSEConfig
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:130    .text.RCC_HSEConfig:000000000000000c $d
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:135    .text.RCC_AdjustHSICalibrationValue:0000000000000000 $t
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:142    .text.RCC_AdjustHSICalibrationValue:0000000000000000 RCC_AdjustHSICalibrationValue
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:178    .text.RCC_AdjustHSICalibrationValue:0000000000000010 $d
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:183    .text.RCC_HSICmd:0000000000000000 $t
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:190    .text.RCC_HSICmd:0000000000000000 RCC_HSICmd
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:227    .text.RCC_HSICmd:000000000000001c $d
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:232    .text.RCC_AdjustHSI14CalibrationValue:0000000000000000 $t
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:239    .text.RCC_AdjustHSI14CalibrationValue:0000000000000000 RCC_AdjustHSI14CalibrationValue
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:275    .text.RCC_AdjustHSI14CalibrationValue:0000000000000010 $d
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:280    .text.RCC_HSI14Cmd:0000000000000000 $t
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:287    .text.RCC_HSI14Cmd:0000000000000000 RCC_HSI14Cmd
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:324    .text.RCC_HSI14Cmd:000000000000001c $d
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:329    .text.RCC_HSI14ADCRequestCmd:0000000000000000 $t
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:336    .text.RCC_HSI14ADCRequestCmd:0000000000000000 RCC_HSI14ADCRequestCmd
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:373    .text.RCC_HSI14ADCRequestCmd:000000000000001c $d
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:378    .text.RCC_LSEConfig:0000000000000000 $t
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:385    .text.RCC_LSEConfig:0000000000000000 RCC_LSEConfig
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:418    .text.RCC_LSEConfig:000000000000001c $d
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:423    .text.RCC_LSEDriveConfig:0000000000000000 $t
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:430    .text.RCC_LSEDriveConfig:0000000000000000 RCC_LSEDriveConfig
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:457    .text.RCC_LSEDriveConfig:0000000000000014 $d
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:462    .text.RCC_LSICmd:0000000000000000 $t
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:469    .text.RCC_LSICmd:0000000000000000 RCC_LSICmd
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:506    .text.RCC_LSICmd:000000000000001c $d
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:511    .text.RCC_PLLConfig:0000000000000000 $t
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:518    .text.RCC_PLLConfig:0000000000000000 RCC_PLLConfig
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:555    .text.RCC_PLLConfig:0000000000000018 $d
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:561    .text.RCC_PLLCmd:0000000000000000 $t
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:568    .text.RCC_PLLCmd:0000000000000000 RCC_PLLCmd
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:606    .text.RCC_PLLCmd:0000000000000020 $d
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:612    .text.RCC_HSI48Cmd:0000000000000000 $t
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:619    .text.RCC_HSI48Cmd:0000000000000000 RCC_HSI48Cmd
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:657    .text.RCC_HSI48Cmd:0000000000000020 $d
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:663    .text.RCC_PREDIV1Config:0000000000000000 $t
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:670    .text.RCC_PREDIV1Config:0000000000000000 RCC_PREDIV1Config
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:703    .text.RCC_PREDIV1Config:0000000000000010 $d
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:708    .text.RCC_ClockSecuritySystemCmd:0000000000000000 $t
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:715    .text.RCC_ClockSecuritySystemCmd:0000000000000000 RCC_ClockSecuritySystemCmd
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:753    .text.RCC_ClockSecuritySystemCmd:0000000000000020 $d
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:759    .text.RCC_MCOConfig:0000000000000000 $t
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:766    .text.RCC_MCOConfig:0000000000000000 RCC_MCOConfig
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:807    .text.RCC_MCOConfig:0000000000000014 $d
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:812    .text.RCC_SYSCLKConfig:0000000000000000 $t
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:819    .text.RCC_SYSCLKConfig:0000000000000000 RCC_SYSCLKConfig
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:852    .text.RCC_SYSCLKConfig:0000000000000010 $d
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:857    .text.RCC_GetSYSCLKSource:0000000000000000 $t
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:864    .text.RCC_GetSYSCLKSource:0000000000000000 RCC_GetSYSCLKSource
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:884    .text.RCC_GetSYSCLKSource:000000000000000c $d
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:889    .text.RCC_HCLKConfig:0000000000000000 $t
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 80


/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:896    .text.RCC_HCLKConfig:0000000000000000 RCC_HCLKConfig
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:929    .text.RCC_HCLKConfig:0000000000000010 $d
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:934    .text.RCC_PCLKConfig:0000000000000000 $t
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:941    .text.RCC_PCLKConfig:0000000000000000 RCC_PCLKConfig
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:974    .text.RCC_PCLKConfig:0000000000000010 $d
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:980    .text.RCC_ADCCLKConfig:0000000000000000 $t
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:987    .text.RCC_ADCCLKConfig:0000000000000000 RCC_ADCCLKConfig
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:1033   .text.RCC_ADCCLKConfig:0000000000000028 $d
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:1040   .text.RCC_CECCLKConfig:0000000000000000 $t
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:1047   .text.RCC_CECCLKConfig:0000000000000000 RCC_CECCLKConfig
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:1074   .text.RCC_CECCLKConfig:0000000000000014 $d
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:1079   .text.RCC_I2CCLKConfig:0000000000000000 $t
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:1086   .text.RCC_I2CCLKConfig:0000000000000000 RCC_I2CCLKConfig
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:1113   .text.RCC_I2CCLKConfig:0000000000000014 $d
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:1118   .text.RCC_USARTCLKConfig:0000000000000000 $t
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:1125   .text.RCC_USARTCLKConfig:0000000000000000 RCC_USARTCLKConfig
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:1195   .text.RCC_USARTCLKConfig:0000000000000038 $d
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:1202   .text.RCC_USBCLKConfig:0000000000000000 $t
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:1209   .text.RCC_USBCLKConfig:0000000000000000 RCC_USBCLKConfig
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:1236   .text.RCC_USBCLKConfig:0000000000000014 $d
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:1242   .text.RCC_GetClocksFreq:0000000000000000 $t
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:1249   .text.RCC_GetClocksFreq:0000000000000000 RCC_GetClocksFreq
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:1766   .text.RCC_GetClocksFreq:00000000000001e4 $d
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:1776   .text.RCC_RTCCLKConfig:0000000000000000 $t
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:1783   .text.RCC_RTCCLKConfig:0000000000000000 RCC_RTCCLKConfig
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:1804   .text.RCC_RTCCLKConfig:000000000000000c $d
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:1809   .text.RCC_RTCCLKCmd:0000000000000000 $t
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:1816   .text.RCC_RTCCLKCmd:0000000000000000 RCC_RTCCLKCmd
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:1854   .text.RCC_RTCCLKCmd:0000000000000020 $d
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:1860   .text.RCC_BackupResetCmd:0000000000000000 $t
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:1867   .text.RCC_BackupResetCmd:0000000000000000 RCC_BackupResetCmd
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:1905   .text.RCC_BackupResetCmd:0000000000000020 $d
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:1911   .text.RCC_AHBPeriphClockCmd:0000000000000000 $t
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:1918   .text.RCC_AHBPeriphClockCmd:0000000000000000 RCC_AHBPeriphClockCmd
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:1957   .text.RCC_AHBPeriphClockCmd:0000000000000018 $d
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:1962   .text.RCC_APB2PeriphClockCmd:0000000000000000 $t
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:1969   .text.RCC_APB2PeriphClockCmd:0000000000000000 RCC_APB2PeriphClockCmd
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:2008   .text.RCC_APB2PeriphClockCmd:0000000000000018 $d
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:2013   .text.RCC_APB1PeriphClockCmd:0000000000000000 $t
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:2020   .text.RCC_APB1PeriphClockCmd:0000000000000000 RCC_APB1PeriphClockCmd
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:2059   .text.RCC_APB1PeriphClockCmd:0000000000000018 $d
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:2064   .text.RCC_AHBPeriphResetCmd:0000000000000000 $t
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:2071   .text.RCC_AHBPeriphResetCmd:0000000000000000 RCC_AHBPeriphResetCmd
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:2110   .text.RCC_AHBPeriphResetCmd:0000000000000018 $d
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:2115   .text.RCC_APB2PeriphResetCmd:0000000000000000 $t
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:2122   .text.RCC_APB2PeriphResetCmd:0000000000000000 RCC_APB2PeriphResetCmd
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:2161   .text.RCC_APB2PeriphResetCmd:0000000000000018 $d
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:2166   .text.RCC_APB1PeriphResetCmd:0000000000000000 $t
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:2173   .text.RCC_APB1PeriphResetCmd:0000000000000000 RCC_APB1PeriphResetCmd
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:2212   .text.RCC_APB1PeriphResetCmd:0000000000000018 $d
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:2217   .text.RCC_ITConfig:0000000000000000 $t
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:2224   .text.RCC_ITConfig:0000000000000000 RCC_ITConfig
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:2263   .text.RCC_ITConfig:0000000000000018 $d
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:2268   .text.RCC_GetFlagStatus:0000000000000000 $t
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:2275   .text.RCC_GetFlagStatus:0000000000000000 RCC_GetFlagStatus
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:2373   .text.RCC_GetFlagStatus:0000000000000034 $d
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:2378   .text.RCC_WaitForHSEStartUp:0000000000000000 $t
ARM GAS  /var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s 			page 81


/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:2385   .text.RCC_WaitForHSEStartUp:0000000000000000 RCC_WaitForHSEStartUp
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:2452   .text.RCC_ClearFlag:0000000000000000 $t
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:2459   .text.RCC_ClearFlag:0000000000000000 RCC_ClearFlag
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:2480   .text.RCC_ClearFlag:0000000000000010 $d
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:2485   .text.RCC_GetITStatus:0000000000000000 $t
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:2492   .text.RCC_GetITStatus:0000000000000000 RCC_GetITStatus
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:2527   .text.RCC_GetITStatus:0000000000000010 $d
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:2532   .text.RCC_ClearITPendingBit:0000000000000000 $t
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:2539   .text.RCC_ClearITPendingBit:0000000000000000 RCC_ClearITPendingBit
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:2558   .text.RCC_ClearITPendingBit:0000000000000008 $d
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:2563   .data.APBAHBPrescTable:0000000000000000 $d
/var/folders/ww/rl_brt8s5pq2m4_0c4ltm8d00000gn/T//ccB8jnPS.s:2567   .data.APBAHBPrescTable:0000000000000000 APBAHBPrescTable

UNDEFINED SYMBOLS
__aeabi_uidiv
